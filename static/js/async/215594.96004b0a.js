"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["215594"],{34991:function(e,n,i){i.r(n),i.d(n,{default:()=>t});var d=i(110239),a=i(437562),c=i(564114);function s(e){let n={a:"a",code:"code",h1:"h1",p:"p",...(0,a.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"dynamic-field",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dynamic-field",children:"#"}),"Dynamic Field"]}),"\n","\n",(0,d.jsxs)(n.p,{children:["This example demonstrates how to declare dependencies between form fields using the ",(0,d.jsx)(n.code,{children:"deps"})," property."]}),"\n",(0,d.jsxs)(n.p,{children:["Example explanation: The ",(0,d.jsx)(n.code,{children:"City"})," field will only be displayed when ",(0,d.jsx)(n.code,{children:"Country"})," has a value."]}),"\n",(0,d.jsxs)(n.p,{children:["You can also use ",(0,d.jsx)(n.code,{children:"form.getValueIn('country')"})," as an input parameter for the component under the city ",(0,d.jsx)(n.code,{children:"Field"})," to control the component's behavior, such as filtering cities based on the selected country."]}),"\n",(0,d.jsx)(c.NR,{})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(s,{...e})}):s(e)}t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["en%2Fexamples%2Fnode-form%2Fdynamic.mdx"]={toc:[],title:"Dynamic Field",headingTitle:"Dynamic Field",frontmatter:{outline:!1}}}}]);