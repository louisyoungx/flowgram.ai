"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["185895"],{423324:function(n){n.exports="import '@flowgram.ai/free-layout-editor/index.css';\nimport { FreeLayoutEditorProvider, EditorRenderer } from '@flowgram.ai/free-layout-editor';\n\nconst FlowGramApp = () => (\n  <FreeLayoutEditorProvider>\n    <EditorRenderer />\n  </FreeLayoutEditorProvider>\n);\n\nexport default FlowGramApp;\n"},764897:function(n){n.exports="import '@flowgram.ai/free-layout-editor/index.css';\n\nimport {\n  FreeLayoutEditorProvider,\n  EditorRenderer,\n  useNodeRender,\n  WorkflowNodeProps,\n  WorkflowNodeRenderer,\n} from '@flowgram.ai/free-layout-editor';\n\nconst NodeRender = (props: WorkflowNodeProps) => {\n  const { form, selected } = useNodeRender();\n  return (\n    <WorkflowNodeRenderer\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: selected ? '#4e40e5' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n      }}\n      node={props.node}\n    >\n      {form?.render()}\n    </WorkflowNodeRenderer>\n  );\n};\n\nconst FlowGramApp = () => (\n  <FreeLayoutEditorProvider\n    materials={{\n      renderDefaultNode: NodeRender,\n    }}\n    nodeRegistries={[\n      {\n        type: 'custom',\n      },\n    ]}\n    initialData={{\n      nodes: [\n        {\n          id: '1',\n          type: 'custom',\n          meta: {\n            position: { x: 250, y: 100 },\n          },\n        },\n      ],\n      edges: [],\n    }}\n  >\n    <EditorRenderer />\n  </FreeLayoutEditorProvider>\n);\n\nexport default FlowGramApp;\n"},938682:function(n){n.exports="import '@flowgram.ai/free-layout-editor/index.css';\n\nimport {\n  FreeLayoutEditorProvider,\n  EditorRenderer,\n  useNodeRender,\n  WorkflowNodeProps,\n  WorkflowNodeRenderer,\n} from '@flowgram.ai/free-layout-editor';\n\nconst NodeRender = (props: WorkflowNodeProps) => {\n  const { form, selected } = useNodeRender();\n  return (\n    <WorkflowNodeRenderer\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: selected ? '#4e40e5' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n      }}\n      node={props.node}\n    >\n      {form?.render()}\n    </WorkflowNodeRenderer>\n  );\n};\n\nconst FlowGramApp = () => (\n  <FreeLayoutEditorProvider\n    onAllLayersRendered={(ctx) => {\n      ctx.tools.fitView(false);\n    }}\n    materials={{\n      renderDefaultNode: NodeRender,\n    }}\n    nodeRegistries={[\n      {\n        type: 'custom',\n      },\n    ]}\n    canDeleteNode={() => true}\n    canDeleteLine={() => true}\n    initialData={{\n      nodes: [\n        {\n          id: '1',\n          type: 'custom',\n          meta: {\n            position: { x: 0, y: 0 },\n          },\n        },\n        {\n          id: '2',\n          type: 'custom',\n          meta: {\n            position: { x: 400, y: 0 },\n          },\n        },\n      ],\n      edges: [\n        {\n          sourceNodeID: '1',\n          targetNodeID: '2',\n        },\n      ],\n    }}\n  >\n    <EditorRenderer />\n  </FreeLayoutEditorProvider>\n);\n\nexport default FlowGramApp;\n"},670703:function(n){n.exports="import '@flowgram.ai/free-layout-editor/index.css';\n\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\nimport { createFreeSnapPlugin } from '@flowgram.ai/free-snap-plugin';\nimport {\n  FreeLayoutEditorProvider,\n  EditorRenderer,\n  useNodeRender,\n  WorkflowNodeProps,\n  WorkflowNodeRenderer,\n} from '@flowgram.ai/free-layout-editor';\n\nconst NodeRender = (props: WorkflowNodeProps) => {\n  const { form, selected } = useNodeRender();\n  return (\n    <WorkflowNodeRenderer\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: selected ? '#4e40e5' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n      }}\n      node={props.node}\n    >\n      {form?.render()}\n    </WorkflowNodeRenderer>\n  );\n};\n\nconst FlowGramApp = () => (\n  <FreeLayoutEditorProvider\n    plugins={() => [createMinimapPlugin({}), createFreeSnapPlugin({})]}\n    onAllLayersRendered={(ctx) => {\n      ctx.tools.fitView(false);\n    }}\n    materials={{\n      renderDefaultNode: NodeRender,\n    }}\n    nodeRegistries={[\n      {\n        type: 'custom',\n      },\n    ]}\n    canDeleteNode={() => true}\n    canDeleteLine={() => true}\n    initialData={{\n      nodes: [\n        {\n          id: '1',\n          type: 'custom',\n          meta: {\n            position: { x: 0, y: 0 },\n          },\n        },\n        {\n          id: '2',\n          type: 'custom',\n          meta: {\n            position: { x: 400, y: -200 },\n          },\n        },\n        {\n          id: '3',\n          type: 'custom',\n          meta: {\n            position: { x: 400, y: 0 },\n          },\n        },\n        {\n          id: '4',\n          type: 'custom',\n          meta: {\n            position: { x: 400, y: 200 },\n          },\n        },\n        {\n          id: '5',\n          type: 'custom',\n          meta: {\n            position: { x: 800, y: 0 },\n          },\n        },\n      ],\n      edges: [\n        {\n          sourceNodeID: '1',\n          targetNodeID: '2',\n        },\n        {\n          sourceNodeID: '1',\n          targetNodeID: '3',\n        },\n        {\n          sourceNodeID: '1',\n          targetNodeID: '4',\n        },\n        {\n          sourceNodeID: '2',\n          targetNodeID: '5',\n        },\n        {\n          sourceNodeID: '3',\n          targetNodeID: '5',\n        },\n        {\n          sourceNodeID: '4',\n          targetNodeID: '5',\n        },\n      ],\n    }}\n  >\n    <EditorRenderer />\n  </FreeLayoutEditorProvider>\n);\n\nexport default FlowGramApp;\n"},818610:function(n){n.exports="import '@flowgram.ai/free-layout-editor/index.css';\n\nimport { FreeLayoutEditorProvider, EditorRenderer } from '@flowgram.ai/free-layout-editor';\n\nimport { useEditorProps } from './use-editor-props';\n\nconst FlowGramApp = () => {\n  const editorProps = useEditorProps();\n  return (\n    <FreeLayoutEditorProvider {...editorProps}>\n      <EditorRenderer />\n    </FreeLayoutEditorProvider>\n  );\n};\n\nexport default FlowGramApp;\n"},545917:function(n){n.exports="import { WorkflowJSON } from '@flowgram.ai/free-layout-editor';\n\nexport const initialData: WorkflowJSON = {\n  nodes: [\n    {\n      id: '1',\n      type: 'custom',\n      meta: {\n        position: { x: 0, y: 0 },\n      },\n    },\n    {\n      id: '2',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: -200 },\n      },\n    },\n    {\n      id: '3',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: 0 },\n      },\n    },\n    {\n      id: '4',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: 200 },\n      },\n    },\n    {\n      id: '5',\n      type: 'custom',\n      meta: {\n        position: { x: 800, y: 0 },\n      },\n    },\n  ],\n  edges: [\n    {\n      sourceNodeID: '1',\n      targetNodeID: '2',\n    },\n    {\n      sourceNodeID: '1',\n      targetNodeID: '3',\n    },\n    {\n      sourceNodeID: '1',\n      targetNodeID: '4',\n    },\n    {\n      sourceNodeID: '2',\n      targetNodeID: '5',\n    },\n    {\n      sourceNodeID: '3',\n      targetNodeID: '5',\n    },\n    {\n      sourceNodeID: '4',\n      targetNodeID: '5',\n    },\n  ],\n};\n"},761254:function(n){n.exports="import { WorkflowNodeRegistry } from '@flowgram.ai/free-layout-editor';\n\n/**\n * You can customize your own node registry\n * 你可以自定义节点的注册器\n */\nexport const nodeRegistries: WorkflowNodeRegistry[] = [\n  {\n    type: 'custom',\n  },\n];\n"},138359:function(n){n.exports="import '@flowgram.ai/free-layout-editor/index.css';\n\nimport {\n  useNodeRender,\n  WorkflowNodeProps,\n  WorkflowNodeRenderer,\n} from '@flowgram.ai/free-layout-editor';\n\nexport const NodeRender = (props: WorkflowNodeProps) => {\n  const { form, selected } = useNodeRender();\n  return (\n    <WorkflowNodeRenderer\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: selected ? '#4e40e5' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n      }}\n      node={props.node}\n    >\n      {form?.render()}\n    </WorkflowNodeRenderer>\n  );\n};\n"},983088:function(n){n.exports="import { useMemo } from 'react';\n\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\nimport { createFreeSnapPlugin } from '@flowgram.ai/free-snap-plugin';\nimport { FreeLayoutProps } from '@flowgram.ai/free-layout-editor';\n\nimport { NodeRender } from './node-render';\nimport { nodeRegistries } from './node-registries';\nimport { initialData } from './initial-data';\n\nexport const useEditorProps = () =>\n  useMemo<FreeLayoutProps>(\n    () => ({\n      plugins: () => [createMinimapPlugin({}), createFreeSnapPlugin({})],\n      onAllLayersRendered: (ctx) => {\n        ctx.tools.fitView(false);\n      },\n      materials: {\n        renderDefaultNode: NodeRender,\n      },\n      nodeRegistries,\n      canDeleteNode: () => true,\n      canDeleteLine: () => true,\n      initialData,\n    }),\n    []\n  );\n"},360771:function(n){n.exports="import '@flowgram.ai/free-layout-editor/index.css';\n\nimport { FreeLayoutEditorProvider, EditorRenderer } from '@flowgram.ai/free-layout-editor';\n\nimport { useEditorProps } from './use-editor-props';\n\nconst FlowGramApp = () => {\n  const editorProps = useEditorProps();\n  return (\n    <FreeLayoutEditorProvider {...editorProps}>\n      <EditorRenderer />\n    </FreeLayoutEditorProvider>\n  );\n};\n\nexport default FlowGramApp;\n"},310767:function(n){n.exports="import { WorkflowJSON } from '@flowgram.ai/free-layout-editor';\n\nexport const initialData: WorkflowJSON = {\n  nodes: [\n    {\n      id: '1',\n      type: 'start',\n      meta: {\n        position: { x: 0, y: 0 },\n      },\n      data: {\n        title: 'Start Node',\n      },\n    },\n    {\n      id: '2',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: -200 },\n      },\n      data: {\n        title: 'Custom Node A',\n      },\n    },\n    {\n      id: '3',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: 0 },\n      },\n      data: {\n        title: 'Custom Node B',\n      },\n    },\n    {\n      id: '4',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: 200 },\n      },\n      data: {\n        title: 'Custom Node C',\n      },\n    },\n    {\n      id: '5',\n      type: 'end',\n      meta: {\n        position: { x: 800, y: 0 },\n      },\n      data: {\n        title: 'End Node',\n      },\n    },\n  ],\n  edges: [\n    {\n      sourceNodeID: '1',\n      targetNodeID: '2',\n    },\n    {\n      sourceNodeID: '1',\n      targetNodeID: '3',\n    },\n    {\n      sourceNodeID: '1',\n      targetNodeID: '4',\n    },\n    {\n      sourceNodeID: '2',\n      targetNodeID: '5',\n    },\n    {\n      sourceNodeID: '3',\n      targetNodeID: '5',\n    },\n    {\n      sourceNodeID: '4',\n      targetNodeID: '5',\n    },\n  ],\n};\n"},350491:function(n){n.exports="import { WorkflowNodeRegistry } from '@flowgram.ai/free-layout-editor';\n\n/**\n * You can customize your own node registry\n * 你可以自定义节点的注册器\n */\nexport const nodeRegistries: WorkflowNodeRegistry[] = [\n  {\n    type: 'start',\n    meta: {\n      isStart: true, // Mark as start\n      deleteDisable: true, // The start node cannot be deleted\n      copyDisable: true, // The start node cannot be copied\n      defaultPorts: [{ type: 'output' }], // Used to define the input and output ports, the start node only has the output port\n    },\n  },\n  {\n    type: 'end',\n    meta: {\n      deleteDisable: true,\n      copyDisable: true,\n      defaultPorts: [{ type: 'input' }],\n    },\n  },\n  {\n    type: 'custom',\n    meta: {},\n    defaultPorts: [{ type: 'output' }, { type: 'input' }], // A normal node has two ports\n  },\n];\n"},917072:function(n){n.exports="import '@flowgram.ai/free-layout-editor/index.css';\n\nimport {\n  useNodeRender,\n  WorkflowNodeProps,\n  WorkflowNodeRenderer,\n} from '@flowgram.ai/free-layout-editor';\n\nexport const NodeRender = (props: WorkflowNodeProps) => {\n  const { form, selected } = useNodeRender();\n  return (\n    <WorkflowNodeRenderer\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: selected ? '#4e40e5' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n      }}\n      node={props.node}\n    >\n      {form?.render()}\n    </WorkflowNodeRenderer>\n  );\n};\n"},441909:function(n){n.exports="import { useMemo } from 'react';\n\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\nimport { createFreeSnapPlugin } from '@flowgram.ai/free-snap-plugin';\nimport { Field, FreeLayoutProps } from '@flowgram.ai/free-layout-editor';\n\nimport { NodeRender } from './node-render';\nimport { nodeRegistries } from './node-registries';\nimport { initialData } from './initial-data';\n\nexport const useEditorProps = () =>\n  useMemo<FreeLayoutProps>(\n    () => ({\n      plugins: () => [createMinimapPlugin({}), createFreeSnapPlugin({})],\n      onAllLayersRendered: (ctx) => {\n        ctx.tools.fitView(false);\n      },\n      materials: {\n        renderDefaultNode: NodeRender,\n      },\n      nodeRegistries,\n      canDeleteNode: () => true,\n      canDeleteLine: () => true,\n      initialData,\n      /**\n       * Node engine enable, you can configure formMeta in the FlowNodeRegistry\n       */\n      nodeEngine: {\n        enable: true,\n      },\n      /**\n       * Redo/Undo enable\n       */\n      history: {\n        enable: true,\n        enableChangeNode: true, // Listen Node engine data change\n      },\n      getNodeDefaultRegistry(type) {\n        return {\n          type,\n          meta: {\n            defaultExpanded: true,\n          },\n          formMeta: {\n            /**\n             * Render form\n             */\n            render: () => (\n              <>\n                <Field<string> name=\"title\">{({ field }) => <div>{field.value}</div>}</Field>\n              </>\n            ),\n          },\n        };\n      },\n    }),\n    []\n  );\n"},699594:function(n){n.exports="import {\n  useService,\n  WorkflowDocument,\n  WorkflowNodeEntity,\n  WorkflowSelectService,\n} from '@flowgram.ai/free-layout-editor';\n\nexport const AddNode = () => {\n  const workflowDocument = useService(WorkflowDocument);\n  const selectService = useService(WorkflowSelectService);\n\n  return (\n    <div style={{ position: 'absolute', zIndex: 10, bottom: 16, left: 8, display: 'flex', gap: 8 }}>\n      <button\n        style={{\n          border: '1px solid #e0e0e0',\n          borderRadius: '50%',\n          cursor: 'pointer',\n          padding: '4px',\n          color: '#ffffff',\n          background: '#7e72e8',\n          width: 70,\n          height: 70,\n          fontSize: 14,\n        }}\n        onClick={() => {\n          const node: WorkflowNodeEntity = workflowDocument.createWorkflowNodeByType(\n            'custom',\n            undefined, // position undefined means create node in center of canvas - position undefined 可以在画布中间创建节点\n            {\n              data: {\n                title: 'New Node',\n              },\n            }\n          );\n          selectService.selectNode(node);\n        }}\n      >\n        + Node\n      </button>\n    </div>\n  );\n};\n"},363788:function(n){n.exports="import '@flowgram.ai/free-layout-editor/index.css';\n\nimport { FreeLayoutEditorProvider, EditorRenderer } from '@flowgram.ai/free-layout-editor';\n\nimport { useEditorProps } from './use-editor-props';\nimport { Tools } from './tools';\nimport { Minimap } from './minimap';\nimport { AddNode } from './add-node';\n\nconst FlowGramApp = () => {\n  const editorProps = useEditorProps();\n  return (\n    <FreeLayoutEditorProvider {...editorProps}>\n      <EditorRenderer />\n      <Tools />\n      <Minimap />\n      <AddNode />\n    </FreeLayoutEditorProvider>\n  );\n};\n\nexport default FlowGramApp;\n"},152097:function(n){n.exports="import { WorkflowJSON } from '@flowgram.ai/free-layout-editor';\n\nexport const initialData: WorkflowJSON = {\n  nodes: [\n    {\n      id: '1',\n      type: 'start',\n      meta: {\n        position: { x: 0, y: 0 },\n      },\n      data: {\n        title: 'Start Node',\n      },\n    },\n    {\n      id: '2',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: -200 },\n      },\n      data: {\n        title: 'Custom Node A',\n      },\n    },\n    {\n      id: '3',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: 0 },\n      },\n      data: {\n        title: 'Custom Node B',\n      },\n    },\n    {\n      id: '4',\n      type: 'custom',\n      meta: {\n        position: { x: 400, y: 200 },\n      },\n      data: {\n        title: 'Custom Node C',\n      },\n    },\n    {\n      id: '5',\n      type: 'end',\n      meta: {\n        position: { x: 800, y: 0 },\n      },\n      data: {\n        title: 'End Node',\n      },\n    },\n  ],\n  edges: [\n    {\n      sourceNodeID: '1',\n      targetNodeID: '2',\n    },\n    {\n      sourceNodeID: '1',\n      targetNodeID: '3',\n    },\n    {\n      sourceNodeID: '1',\n      targetNodeID: '4',\n    },\n    {\n      sourceNodeID: '2',\n      targetNodeID: '5',\n    },\n    {\n      sourceNodeID: '3',\n      targetNodeID: '5',\n    },\n    {\n      sourceNodeID: '4',\n      targetNodeID: '5',\n    },\n  ],\n};\n"},930570:function(n){n.exports="import { MinimapRender } from '@flowgram.ai/minimap-plugin';\n\nexport const Minimap = () => (\n  <div\n    style={{\n      position: 'absolute',\n      right: 16,\n      bottom: 72,\n      zIndex: 100,\n      width: 118,\n    }}\n  >\n    <MinimapRender\n      containerStyles={{\n        pointerEvents: 'auto',\n        position: 'relative',\n        top: 'unset',\n        right: 'unset',\n        bottom: 'unset',\n        left: 'unset',\n      }}\n      inactiveStyle={{\n        opacity: 1,\n        scale: 1,\n        translateX: 0,\n        translateY: 0,\n      }}\n    />\n  </div>\n);\n"},992842:function(n){n.exports="import { WorkflowNodeRegistry } from '@flowgram.ai/free-layout-editor';\n\n/**\n * You can customize your own node registry\n * 你可以自定义节点的注册器\n */\nexport const nodeRegistries: WorkflowNodeRegistry[] = [\n  {\n    type: 'start',\n    meta: {\n      isStart: true, // Mark as start\n      deleteDisable: true, // The start node cannot be deleted\n      copyDisable: true, // The start node cannot be copied\n      defaultPorts: [{ type: 'output' }], // Used to define the input and output ports, the start node only has the output port\n    },\n  },\n  {\n    type: 'end',\n    meta: {\n      deleteDisable: true,\n      copyDisable: true,\n      defaultPorts: [{ type: 'input' }],\n    },\n  },\n  {\n    type: 'custom',\n    meta: {},\n    defaultPorts: [{ type: 'output' }, { type: 'input' }], // A normal node has two ports\n  },\n];\n"},834698:function(n){n.exports="import '@flowgram.ai/free-layout-editor/index.css';\n\nimport {\n  useNodeRender,\n  WorkflowNodeProps,\n  WorkflowNodeRenderer,\n} from '@flowgram.ai/free-layout-editor';\n\nexport const NodeRender = (props: WorkflowNodeProps) => {\n  const { form, selected } = useNodeRender();\n  return (\n    <WorkflowNodeRenderer\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: selected ? '#4e40e5' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n      }}\n      node={props.node}\n    >\n      {form?.render()}\n    </WorkflowNodeRenderer>\n  );\n};\n"},674626:function(n){n.exports="import { CSSProperties, useEffect, useState } from 'react';\n\nimport { usePlaygroundTools, useClientContext, LineType } from '@flowgram.ai/free-layout-editor';\n\nexport const Tools = () => {\n  const { history } = useClientContext();\n  const tools = usePlaygroundTools();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  const buttonStyle: CSSProperties = {\n    border: '1px solid #e0e0e0',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    padding: '4px',\n    color: '#141414',\n    background: '#e1e3e4',\n  };\n\n  useEffect(() => {\n    const disposable = history.undoRedoService.onChange(() => {\n      setCanUndo(history.canUndo());\n      setCanRedo(history.canRedo());\n    });\n    return () => disposable.dispose();\n  }, [history]);\n\n  return (\n    <div\n      style={{ position: 'absolute', zIndex: 10, bottom: 34, right: 16, display: 'flex', gap: 8 }}\n    >\n      <button style={buttonStyle} onClick={() => tools.zoomin()}>\n        ZoomIn\n      </button>\n      <button style={buttonStyle} onClick={() => tools.zoomout()}>\n        ZoomOut\n      </button>\n      <span\n        style={{\n          ...buttonStyle,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'default',\n          width: 40,\n        }}\n      >\n        {Math.floor(tools.zoom * 100)}%\n      </span>\n      <button style={buttonStyle} onClick={() => tools.fitView()}>\n        FitView\n      </button>\n      <button style={buttonStyle} onClick={() => tools.autoLayout()}>\n        AutoLayout\n      </button>\n      <button\n        style={buttonStyle}\n        onClick={() =>\n          tools.switchLineType(\n            tools.lineType === LineType.BEZIER ? LineType.LINE_CHART : LineType.BEZIER\n          )\n        }\n      >\n        {tools.lineType === LineType.BEZIER ? 'Bezier' : 'Fold'}\n      </button>\n      <button\n        style={{\n          ...buttonStyle,\n          cursor: canUndo ? 'pointer' : 'not-allowed',\n          color: canUndo ? '#141414' : '#b1b1b1',\n        }}\n        onClick={() => history.undo()}\n        disabled={!canUndo}\n      >\n        Undo\n      </button>\n      <button\n        style={{\n          ...buttonStyle,\n          cursor: canRedo ? 'pointer' : 'not-allowed',\n          color: canRedo ? '#141414' : '#b1b1b1',\n        }}\n        onClick={() => history.redo()}\n        disabled={!canRedo}\n      >\n        Redo\n      </button>\n    </div>\n  );\n};\n"},805510:function(n){n.exports="import { useMemo } from 'react';\n\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\nimport { createFreeSnapPlugin } from '@flowgram.ai/free-snap-plugin';\nimport { Field, FreeLayoutProps } from '@flowgram.ai/free-layout-editor';\n\nimport { NodeRender } from './node-render';\nimport { nodeRegistries } from './node-registries';\nimport { initialData } from './initial-data';\n\nexport const useEditorProps = () =>\n  useMemo<FreeLayoutProps>(\n    () => ({\n      plugins: () => [\n        createMinimapPlugin({\n          disableLayer: true,\n          canvasStyle: {\n            canvasWidth: 100,\n            canvasHeight: 50,\n            canvasPadding: 50,\n          },\n        }),\n        createFreeSnapPlugin({}),\n      ],\n      onAllLayersRendered: (ctx) => {\n        ctx.tools.fitView(false);\n      },\n      materials: {\n        renderDefaultNode: NodeRender,\n      },\n      nodeRegistries,\n      canDeleteNode: () => true,\n      canDeleteLine: () => true,\n      initialData,\n      /**\n       * Node engine enable, you can configure formMeta in the FlowNodeRegistry\n       */\n      nodeEngine: {\n        enable: true,\n      },\n      /**\n       * Redo/Undo enable\n       */\n      history: {\n        enable: true,\n        enableChangeNode: true, // Listen Node engine data change\n      },\n      getNodeDefaultRegistry(type) {\n        return {\n          type,\n          meta: {\n            defaultExpanded: true,\n          },\n          formMeta: {\n            /**\n             * Render form\n             */\n            render: () => (\n              <>\n                <Field<string> name=\"title\">{({ field }) => <div>{field.value}</div>}</Field>\n              </>\n            ),\n          },\n        };\n      },\n    }),\n    []\n  );\n"},659722:function(n,e,o){o.d(e,{B:()=>d,G:()=>i});var t=o(110239),r=o(399743);let i=n=>{let{files:e,activeFile:o}=n;return(0,t.jsx)(r.xR,{files:e,theme:"light",template:"react-ts",customSetup:{dependencies:{"@flowgram.ai/free-layout-editor":"0.5.5","@flowgram.ai/free-snap-plugin":"0.5.5","@flowgram.ai/minimap-plugin":"0.5.5","styled-components":"5.3.11"}},options:{editorHeight:350,activeFile:o}})},d=n=>{let{files:e,activeFile:o}=n;return(0,t.jsx)(r.xR,{files:e,theme:"light",template:"react-ts",customSetup:{dependencies:{"@flowgram.ai/fixed-layout-editor":"0.1.0-alpha.19","@flowgram.ai/fixed-semi-materials":"0.1.0-alpha.19","@flowgram.ai/minimap-plugin":"0.1.0-alpha.19","styled-components":"5.3.11"}},options:{editorHeight:350,activeFile:o}})}}}]);