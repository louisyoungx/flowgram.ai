"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["359329"],{564114:function(n,e,t){t.d(e,{U2:()=>r,DJ:()=>a,oF:()=>x,tt:()=>s,NR:()=>P,_7:()=>p,Ph:()=>f,C1:()=>d,kb:()=>I,zQ:()=>c,uT:()=>S});var o=t(954272),i=t(908600);t(963270);let r=i.lazy(()=>Promise.all([t.e("386212"),t.e("838147"),t.e("135674"),t.e("254129"),t.e("428647"),t.e("260790"),t.e("46854"),t.e("572521"),t.e("44419"),t.e("914696"),t.e("419217")]).then(t.bind(t,682452)).then(n=>({default:n.DemoFixedLayout})));t(264697);let a=i.lazy(()=>Promise.all([t.e("386212"),t.e("838147"),t.e("135674"),t.e("254129"),t.e("428647"),t.e("260790"),t.e("46854"),t.e("795751"),t.e("914696"),t.e("170787")]).then(t.bind(t,952018)).then(n=>({default:n.DemoFreeLayout}))),d=i.lazy(()=>Promise.all([t.e("386212"),t.e("523737")]).then(t.bind(t,657341)).then(n=>({default:n.DemoFreeLayout})));var l=t(110239);let s=()=>(0,l.jsx)("div",{style:{zIndex:1,position:"relative"},children:(0,l.jsx)(o.g,{files:{"editor.tsx":{active:!0,code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { EditorRenderer, FreeLayoutEditorProvider } from '@flowgram.ai/free-layout-editor';\n\nimport { useEditorProps } from './hooks/use-editor-props';\nimport { Tools } from './components/tools';\nimport { NodeAddPanel } from './components/node-add-panel';\nimport { Minimap } from './components/minimap';\nimport '@flowgram.ai/free-layout-editor/index.css';\nimport './index.css';\n\nexport const Editor = () => {\n  const editorProps = useEditorProps();\n  return (\n    <FreeLayoutEditorProvider {...editorProps}>\n      <div className=\"demo-free-container\">\n        <div className=\"demo-free-layout\">\n          <NodeAddPanel />\n          <EditorRenderer className=\"demo-free-editor\" />\n        </div>\n        <Tools />\n        <Minimap />\n      </div>\n    </FreeLayoutEditorProvider>\n  );\n};\n"},"use-editor-props.tsx":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { useMemo } from 'react';\n\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\nimport { createFreeSnapPlugin } from '@flowgram.ai/free-snap-plugin';\nimport {\n  FreeLayoutProps,\n  WorkflowNodeProps,\n  WorkflowNodeRenderer,\n  Field,\n  useNodeRender,\n} from '@flowgram.ai/free-layout-editor';\n\nimport { nodeRegistries } from '../node-registries';\nimport { initialData } from '../initial-data';\n\nexport const useEditorProps = () =>\n  useMemo<FreeLayoutProps>(\n    () => ({\n      /**\n       * Whether to enable the background\n       */\n      background: true,\n      /**\n       * Whether it is read-only or not, the node cannot be dragged in read-only mode\n       */\n      readonly: false,\n      /**\n       * Initial data\n       * 初始化数据\n       */\n      initialData,\n      /**\n       * Node registries\n       * 节点注册\n       */\n      nodeRegistries,\n      /**\n       * 节点数据转换, 由 ctx.document.fromJSON 调用\n       * Node data transformation, called by ctx.document.fromJSON\n       * @param node\n       * @param json\n       */\n      fromNodeJSON(node, json) {\n        return json;\n      },\n      /**\n       * 节点数据转换, 由 ctx.document.toJSON 调用\n       * Node data transformation, called by ctx.document.toJSON\n       * @param node\n       * @param json\n       */\n      toNodeJSON(node, json) {\n        return json;\n      },\n      /**\n       * Get the default node registry, which will be merged with the 'nodeRegistries'\n       * 提供默认的节点注册，这个会和 nodeRegistries 做合并\n       */\n      getNodeDefaultRegistry(type) {\n        return {\n          type,\n          meta: {\n            defaultExpanded: true,\n          },\n          formMeta: {\n            /**\n             * Render form\n             */\n            render: () => (\n              <>\n                <Field<string> name=\"title\">\n                  {({ field }) => <div className=\"demo-free-node-title\">{field.value}</div>}\n                </Field>\n                <div className=\"demo-free-node-content\">\n                  <Field<string> name=\"content\">\n                    <input />\n                  </Field>\n                </div>\n              </>\n            ),\n          },\n        };\n      },\n      materials: {\n        /**\n         * Render Node\n         */\n        renderDefaultNode: (props: WorkflowNodeProps) => {\n          const { form } = useNodeRender();\n          return (\n            <WorkflowNodeRenderer className=\"demo-free-node\" node={props.node}>\n              {form?.render()}\n            </WorkflowNodeRenderer>\n          );\n        },\n      },\n      /**\n       * Content change\n       */\n      onContentChange(ctx, event) {\n        console.log('Auto Save: ', event, ctx.document.toJSON());\n      },\n      // /**\n      //  * Node engine enable, you can configure formMeta in the FlowNodeRegistry\n      //  */\n      nodeEngine: {\n        enable: true,\n      },\n      /**\n       * Redo/Undo enable\n       */\n      history: {\n        enable: true,\n        enableChangeNode: true, // Listen Node engine data change\n      },\n      /**\n       * Playground init\n       */\n      onInit: (ctx) => {},\n      /**\n       * Playground render\n       */\n      onAllLayersRendered(ctx) {\n        //  Fitview\n        ctx.document.fitView(false);\n      },\n      /**\n       * Playground dispose\n       */\n      onDispose() {\n        console.log('---- Playground Dispose ----');\n      },\n      plugins: () => [\n        /**\n         * Minimap plugin\n         * 缩略图插件\n         */\n        createMinimapPlugin({\n          disableLayer: true,\n          canvasStyle: {\n            canvasWidth: 182,\n            canvasHeight: 102,\n            canvasPadding: 50,\n            canvasBackground: 'rgba(245, 245, 245, 1)',\n            canvasBorderRadius: 10,\n            viewportBackground: 'rgba(235, 235, 235, 1)',\n            viewportBorderRadius: 4,\n            viewportBorderColor: 'rgba(201, 201, 201, 1)',\n            viewportBorderWidth: 1,\n            viewportBorderDashLength: 2,\n            nodeColor: 'rgba(255, 255, 255, 1)',\n            nodeBorderRadius: 2,\n            nodeBorderWidth: 0.145,\n            nodeBorderColor: 'rgba(6, 7, 9, 0.10)',\n            overlayColor: 'rgba(255, 255, 255, 0)',\n          },\n        }),\n        /**\n         * Snap plugin\n         * 自动对齐及辅助线插件\n         */\n        createFreeSnapPlugin({\n          edgeColor: '#00B2B2',\n          alignColor: '#00B2B2',\n          edgeLineWidth: 1,\n          alignLineWidth: 1,\n          alignCrossWidth: 8,\n        }),\n      ],\n    }),\n    []\n  );\n","initial-data.ts":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { WorkflowJSON } from '@flowgram.ai/free-layout-editor';\n\nexport const initialData: WorkflowJSON = {\n  nodes: [\n    {\n      id: 'start_0',\n      type: 'start',\n      meta: {\n        position: {\n          x: 150,\n          y: 100,\n        },\n      },\n      data: {\n        title: 'Start',\n        content: 'Start content',\n      },\n    },\n    {\n      id: 'node_0',\n      type: 'condition',\n      meta: {\n        position: {\n          x: 550,\n          y: 100,\n        },\n      },\n      data: {\n        title: 'Condition',\n        content: 'Condition node content',\n        ports: ['if', 'else'],\n      },\n    },\n    {\n      id: 'end_0',\n      type: 'end',\n      meta: {\n        position: {\n          x: 1350,\n          y: 100,\n        },\n      },\n      data: {\n        title: 'End',\n        content: 'End content',\n      },\n    },\n    {\n      id: '144150',\n      type: 'node1',\n      meta: {\n        position: {\n          x: 950,\n          y: 0,\n        },\n      },\n      data: {\n        title: 'New Node1',\n        content: 'xxxx',\n      },\n    },\n    {\n      id: '118937',\n      type: 'node2',\n      meta: {\n        position: {\n          x: 950,\n          y: 200,\n        },\n      },\n      data: {\n        title: 'New Node2',\n        content: 'xxxx',\n      },\n    },\n    {\n      id: 'chain0',\n      type: 'chain',\n      meta: {\n        position: {\n          x: 150,\n          y: 246,\n        },\n      },\n      data: {\n        title: 'Chain',\n        content: 'xxxx',\n      },\n    },\n    {\n      id: '100260',\n      type: 'tool',\n      meta: {\n        position: {\n          x: 55.8,\n          y: 410,\n        },\n      },\n      data: {\n        title: 'New Tool',\n        content: 'xxxx',\n      },\n    },\n    {\n      id: '105108',\n      type: 'tool',\n      meta: {\n        position: {\n          x: 280.5,\n          y: 410,\n        },\n      },\n      data: {\n        title: 'New Tool',\n        content: 'xxxx',\n      },\n    },\n    {\n      id: '106070',\n      type: 'twoway',\n      meta: {\n        position: {\n          x: 550,\n          y: 310,\n        },\n      },\n      data: {\n        title: 'New Twoway',\n        content: 'xxxx',\n      },\n    },\n    {\n      id: '122116',\n      type: 'twoway',\n      meta: {\n        position: {\n          x: 866.0091156462586,\n          y: 422.4669387755102,\n        },\n      },\n      data: {\n        title: 'New Twoway',\n        content: 'xxxx',\n      },\n    },\n  ],\n  edges: [\n    {\n      sourceNodeID: 'start_0',\n      targetNodeID: 'node_0',\n    },\n    {\n      sourceNodeID: 'node_0',\n      targetNodeID: '144150',\n      sourcePortID: 'if',\n    },\n    {\n      sourceNodeID: 'node_0',\n      targetNodeID: '118937',\n      sourcePortID: 'else',\n    },\n    {\n      sourceNodeID: '118937',\n      targetNodeID: 'end_0',\n    },\n    {\n      sourceNodeID: '144150',\n      targetNodeID: 'end_0',\n    },\n    {\n      sourceNodeID: 'chain0',\n      targetNodeID: '100260',\n      sourcePortID: 'p4',\n    },\n    {\n      sourceNodeID: 'chain0',\n      targetNodeID: '105108',\n      sourcePortID: 'p5',\n    },\n    {\n      sourceNodeID: '122116',\n      targetNodeID: '106070',\n      sourcePortID: 'output-left',\n      targetPortID: 'input-right',\n    },\n    {\n      sourceNodeID: '106070',\n      targetNodeID: '122116',\n      sourcePortID: 'output-right',\n      targetPortID: 'input-left',\n    },\n  ],\n};\n","node-registries.ts":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport {\n  WorkflowNodeRegistry,\n  Field,\n  DataEvent,\n  EffectFuncProps,\n  WorkflowPorts,\n} from '@flowgram.ai/free-layout-editor';\n\nconst CONDITION_ITEM_HEIGHT = 30;\n/**\n * You can customize your own node registry\n * 你可以自定义节点的注册器\n */\nexport const nodeRegistries: WorkflowNodeRegistry[] = [\n  {\n    type: 'start',\n    meta: {\n      isStart: true, // Mark as start\n      deleteDisable: true, // The start node cannot be deleted\n      copyDisable: true, // The start node cannot be copied\n      defaultPorts: [{ type: 'output' }], // Used to define the input and output ports, the start node only has the output port\n    },\n  },\n  {\n    type: 'condition',\n    meta: {\n      defaultPorts: [{ type: 'input' }],\n    },\n    formMeta: {\n      /**\n       * Initialize the form values\n       * @param value\n       */\n      formatOnInit: (value) => ({\n        portKeys: ['if', 'else'],\n        ...value,\n      }),\n      effect: {\n        /**\n         * Listen for \"portsKeys\" changes and update ports\n         */\n        portKeys: [\n          {\n            event: DataEvent.onValueInitOrChange,\n            effect: ({ value, context }: EffectFuncProps<Array<string>, FormData>) => {\n              const { node } = context;\n              const defaultPorts: WorkflowPorts = [{ type: 'input' }];\n              const newPorts: WorkflowPorts = value.map((portID: string, i: number) => ({\n                type: 'output',\n                portID,\n                location: 'right',\n                locationConfig: {\n                  right: 0,\n                  top: (i + 1) * CONDITION_ITEM_HEIGHT,\n                },\n              }));\n              node.ports.updateAllPorts([...defaultPorts, ...newPorts]);\n            },\n          },\n        ],\n      },\n      render: () => (\n        <>\n          <Field<string> name=\"title\">\n            {({ field }) => <div className=\"demo-free-node-title\">{field.value}</div>}\n          </Field>\n          <Field<Array<string>> name=\"portKeys\">\n            {({ field: { value, onChange } }) => (\n              <div\n                className=\"demo-free-node-content\"\n                style={{\n                  width: 160,\n                  height: value.length * CONDITION_ITEM_HEIGHT,\n                  minHeight: 2 * CONDITION_ITEM_HEIGHT,\n                }}\n              >\n                <div>\n                  <button onClick={() => onChange(value.concat(`if_${value.length}`))}>\n                    Add Port\n                  </button>\n                </div>\n                <div style={{ marginTop: 8 }}>\n                  <button\n                    onClick={() => onChange(value.filter((v, i, arr) => i !== arr.length - 1))}\n                  >\n                    Delete Port\n                  </button>\n                </div>\n              </div>\n            )}\n          </Field>\n        </>\n      ),\n    },\n  },\n  {\n    type: 'chain',\n    meta: {\n      defaultPorts: [\n        { type: 'input' },\n        { type: 'output' },\n        {\n          portID: 'p4',\n          location: 'bottom',\n          locationConfig: { left: '33%', bottom: 0 },\n          type: 'output',\n        },\n        {\n          portID: 'p5',\n          location: 'bottom',\n          locationConfig: { left: '66%', bottom: 0 },\n          type: 'output',\n        },\n      ],\n    },\n  },\n  {\n    type: 'tool',\n    meta: {\n      defaultPorts: [{ location: 'top', type: 'input' }],\n    },\n  },\n  {\n    // 支持双向连接, Support two-way connection\n    type: 'twoway',\n    meta: {\n      defaultPorts: [\n        { type: 'input', portID: 'input-left', location: 'left' },\n        { type: 'output', portID: 'output-left', location: 'left' },\n        { type: 'input', portID: 'input-right', location: 'right' },\n        { type: 'output', portID: 'output-right', location: 'right' },\n      ],\n    },\n  },\n  {\n    type: 'end',\n    meta: {\n      deleteDisable: true,\n      copyDisable: true,\n      defaultPorts: [{ type: 'input' }],\n    },\n  },\n  {\n    type: 'custom',\n    meta: {},\n    defaultPorts: [{ type: 'output' }, { type: 'input' }], // A normal node has two ports\n  },\n];\n","node-add-panel.tsx":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react';\n\nimport { WorkflowDragService, useService } from '@flowgram.ai/free-layout-editor';\n\nconst cardkeys = ['Node1', 'Node2', 'Condition', 'Chain', 'Tool', 'Twoway'];\n\nexport const NodeAddPanel: React.FC = (props) => {\n  const startDragSerivce = useService<WorkflowDragService>(WorkflowDragService);\n\n  return (\n    <div className=\"demo-free-sidebar\">\n      {cardkeys.map((nodeType) => (\n        <div\n          key={nodeType}\n          className=\"demo-free-card\"\n          onMouseDown={(e) =>\n            startDragSerivce.startDragCard(nodeType.toLowerCase(), e, {\n              data: {\n                title: `New ${nodeType}`,\n                content: 'xxxx',\n              },\n            })\n          }\n        >\n          {nodeType}\n        </div>\n      ))}\n    </div>\n  );\n};\n","tools.tsx":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { useEffect, useState } from 'react';\n\nimport { usePlaygroundTools, useClientContext, LineType } from '@flowgram.ai/free-layout-editor';\n\nexport function Tools() {\n  const { history } = useClientContext();\n  const tools = usePlaygroundTools();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  useEffect(() => {\n    const disposable = history.undoRedoService.onChange(() => {\n      setCanUndo(history.canUndo());\n      setCanRedo(history.canRedo());\n    });\n    return () => disposable.dispose();\n  }, [history]);\n\n  return (\n    <div\n      style={{ position: 'absolute', zIndex: 10, bottom: 16, left: 226, display: 'flex', gap: 8 }}\n    >\n      <button onClick={() => tools.zoomin()}>ZoomIn</button>\n      <button onClick={() => tools.zoomout()}>ZoomOut</button>\n      <button onClick={() => tools.fitView()}>Fitview</button>\n      <button onClick={() => tools.autoLayout()}>AutoLayout</button>\n      <button\n        onClick={() =>\n          tools.switchLineType(\n            tools.lineType === LineType.BEZIER ? LineType.LINE_CHART : LineType.BEZIER\n          )\n        }\n      >\n        {tools.lineType === LineType.BEZIER ? 'Bezier' : 'Fold'}\n      </button>\n      <button onClick={() => history.undo()} disabled={!canUndo}>\n        Undo\n      </button>\n      <button onClick={() => history.redo()} disabled={!canRedo}>\n        Redo\n      </button>\n      <span>{Math.floor(tools.zoom * 100)}%</span>\n    </div>\n  );\n}\n","minimap.tsx":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { MinimapRender } from '@flowgram.ai/minimap-plugin';\n\nexport const Minimap = () => (\n  <div\n    style={{\n      position: 'absolute',\n      left: 226,\n      bottom: 51,\n      zIndex: 100,\n      width: 198,\n    }}\n  >\n    <MinimapRender\n      containerStyles={{\n        pointerEvents: 'auto',\n        position: 'relative',\n        top: 'unset',\n        right: 'unset',\n        bottom: 'unset',\n        left: 'unset',\n      }}\n      inactiveStyle={{\n        opacity: 1,\n        scale: 1,\n        translateX: 0,\n        translateY: 0,\n      }}\n    />\n  </div>\n);\n"},previewStyle:{height:500},editorStyle:{height:500},children:(0,l.jsx)(d,{})})}),c=i.lazy(()=>Promise.all([t.e("386212"),t.e("572521"),t.e("44419"),t.e("27461")]).then(t.bind(t,845925)).then(n=>({default:n.DemoFixedLayout})));function p(n){let e=n.cellHeight||300;return(0,l.jsxs)("table",{className:"",style:{width:"100%",border:"1px solid var(--rp-c-divider-light)",zIndex:1,position:"relative"},children:[(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{style:{textAlign:"center"},children:"dynamicSplit"}),(0,l.jsx)("td",{children:(0,l.jsx)(o.g,{codeInRight:!0,files:{"index.tsx":{code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\nexport const dynamicSplit: FlowDocumentJSON = {\n  nodes: [\n    {\n      id: 'start_0',\n      type: 'start',\n      data: {\n        title: 'Start',\n      },\n      blocks: [],\n    },\n    {\n      id: 'dynamicSplit_0',\n      type: 'dynamicSplit',\n      data: {\n        title: 'DynamicSplit',\n      },\n      blocks: [\n        {\n          id: 'branch_0',\n          type: 'block',\n          data: {\n            title: 'Branch 0',\n          },\n        },\n        {\n          id: 'branch_1',\n          type: 'block',\n          data: {\n            title: 'Branch 1',\n          },\n          blocks: [],\n        },\n      ],\n    },\n    {\n      id: 'end_0',\n      type: 'end',\n      data: {\n        title: 'End',\n      },\n    },\n  ],\n};\n",active:!0}},previewStyle:{width:"50%",height:e,position:"relative"},editorStyle:{width:"50%",height:e},children:(0,l.jsx)(c,{hideTools:!0,demo:"dynamicSplit"})})})]}),(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{style:{textAlign:"center"},children:"loop"}),(0,l.jsx)("td",{children:(0,l.jsx)(o.g,{codeInRight:!0,files:{"index.tsx":{code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\nexport const loop: FlowDocumentJSON = {\n  nodes: [\n    {\n      id: 'start_0',\n      type: 'start',\n      data: {\n        title: 'Start',\n      },\n      blocks: [],\n    },\n    {\n      id: 'loop_0',\n      type: 'loop',\n      data: {\n        title: 'Loop',\n      },\n      blocks: [\n        {\n          id: 'branch_0',\n          type: 'block',\n          data: {\n            title: 'Branch 0',\n          },\n          blocks: [\n            {\n              id: 'custom',\n              type: 'custom',\n              data: {\n                title: 'Custom',\n              },\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 'end_0',\n      type: 'end',\n      data: {\n        title: 'End',\n      },\n    },\n  ],\n};\n",active:!0}},previewStyle:{width:"50%",height:e,position:"relative"},editorStyle:{height:e,width:"50%"},children:(0,l.jsx)(c,{hideTools:!0,demo:"loop"})})})]}),(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{style:{textAlign:"center"},children:"tryCatch"}),(0,l.jsx)("td",{children:(0,l.jsx)(o.g,{codeInRight:!0,files:{"index.tsx":{code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\nexport const tryCatch: FlowDocumentJSON = {\n  nodes: [\n    {\n      id: 'start_0',\n      type: 'start',\n      data: {\n        title: 'Start',\n      },\n      blocks: [],\n    },\n    {\n      id: 'tryCatch_0',\n      type: 'tryCatch',\n      data: {\n        title: 'TryCatch',\n      },\n      blocks: [\n        {\n          id: 'tryBlock_0',\n          type: 'tryBlock',\n          blocks: [],\n        },\n        {\n          id: 'catchBlock_0',\n          type: 'catchBlock',\n          data: {\n            title: 'Catch Block 1',\n          },\n          blocks: [],\n        },\n        {\n          id: 'catchBlock_1',\n          type: 'catchBlock',\n          data: {\n            title: 'Catch Block 2',\n          },\n          blocks: [],\n        },\n      ],\n    },\n    {\n      id: 'end_0',\n      type: 'end',\n      data: {\n        title: 'End',\n      },\n    },\n  ],\n};\n",active:!0}},previewStyle:{width:"50%",height:e,position:"relative"},editorStyle:{height:e,width:"50%"},children:(0,l.jsx)(c,{hideTools:!0,demo:"tryCatch"})})})]}),(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{style:{textAlign:"center"},children:"multiInputs"}),(0,l.jsx)("td",{children:(0,l.jsx)(o.g,{codeInRight:!0,files:{"index.tsx":{code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\nexport const multiInputs: FlowDocumentJSON = {\n  nodes: [\n    {\n      id: 'multiInputs_0',\n      type: 'multiInputs',\n      blocks: [\n        {\n          id: 'input_0',\n          type: 'input',\n          data: {\n            title: 'input_0',\n          },\n        },\n        {\n          id: 'input_1',\n          type: 'input',\n          data: {\n            title: 'input_1',\n          },\n        },\n        {\n          id: 'input_3',\n          type: 'input',\n          data: {\n            title: 'input_3',\n          },\n        },\n      ],\n    },\n    {\n      id: 'end_0',\n      type: 'end',\n      data: {\n        title: 'End',\n      },\n    },\n  ],\n};\n",active:!0}},previewStyle:{width:"50%",height:e,position:"relative"},editorStyle:{height:e,width:"50%"},children:(0,l.jsx)(c,{hideTools:!0,demo:"multiInputs"})})})]}),(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{style:{textAlign:"center"},children:"multiOutputs"}),(0,l.jsx)("td",{children:(0,l.jsx)(o.g,{codeInRight:!0,files:{"index.tsx":{code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\nexport const multiOutputs: FlowDocumentJSON = {\n  nodes: [\n    {\n      id: 'start_0',\n      type: 'start',\n      data: {\n        title: 'Start',\n      },\n      blocks: [],\n    },\n    {\n      id: 'multiOutputs_0',\n      type: 'multiOutputs',\n      data: {\n        title: 'MultiOutputs',\n      },\n      blocks: [\n        {\n          id: 'output_0',\n          type: 'output',\n          data: {\n            title: 'output_0',\n          },\n        },\n        {\n          id: 'output_1',\n          type: 'output',\n          data: {\n            title: 'output_1',\n          },\n        },\n        {\n          id: 'output_2',\n          type: 'output',\n          data: {\n            title: 'output_2',\n          },\n        },\n      ],\n    },\n  ],\n};\n",active:!0}},previewStyle:{width:"50%",height:e,position:"relative"},editorStyle:{height:e,width:"50%"},children:(0,l.jsx)(c,{hideTools:!0,demo:"multiOutputs"})})})]}),(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{style:{textAlign:"center"},children:"slot"}),(0,l.jsx)("td",{children:(0,l.jsx)(o.g,{codeInRight:!0,files:{"index.tsx":{code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\nexport const slot: FlowDocumentJSON = {\n  nodes: [\n    // 开始节点\n    {\n      id: 'start_0',\n      type: 'start',\n      data: {\n        title: 'Start',\n        content: 'start content',\n      },\n      blocks: [],\n    },\n    {\n      id: 'slot_0',\n      type: 'slot',\n      data: {\n        title: 'Slot',\n        content: 'Slot content',\n      },\n      blocks: [\n        {\n          id: 'slot_port_1',\n          type: 'slotBlock',\n          data: {\n            title: 'Slot 1',\n            content: 'slot 1 content',\n          },\n          blocks: [\n            {\n              id: 'custom_1',\n              type: 'custom',\n              data: {\n                title: 'Custom',\n                content: 'custom content',\n              },\n            },\n          ],\n        },\n        {\n          id: 'slot_port_2',\n          type: 'slotBlock',\n          data: {\n            title: 'Slot 2',\n            content: 'slot 2 content',\n          },\n          blocks: [\n            {\n              id: 'custom_2',\n              type: 'custom',\n              data: {\n                title: 'Custom',\n                content: 'custom content',\n              },\n            },\n          ],\n        },\n        {\n          id: 'slot_port_3',\n          type: 'slotBlock',\n          data: {\n            title: 'Slot 3',\n            content: 'slot 3 content',\n          },\n          blocks: [\n            {\n              id: 'custom_3',\n              type: 'custom',\n              data: {\n                title: 'Custom',\n                content: 'custom content',\n              },\n            },\n            {\n              id: 'custom_4',\n              type: 'custom',\n              data: {\n                title: 'Custom',\n                content: 'custom content',\n              },\n            },\n          ],\n        },\n      ],\n    },\n    // 结束节点\n    {\n      id: 'end_0',\n      type: 'end',\n      data: {\n        title: 'End',\n        content: 'end content',\n      },\n    },\n  ],\n};\n",active:!0}},previewStyle:{width:"50%",height:e,position:"relative"},editorStyle:{height:e,width:"50%"},children:(0,l.jsx)(c,{hideTools:!0,demo:"slot"})})})]})]})}var u=t(767884);let m={code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { FixedLayoutEditorProvider, EditorRenderer } from '@flowgram.ai/fixed-layout-editor';\n\nimport '@flowgram.ai/fixed-layout-editor/index.css';\nimport './index.css';\n\nimport { nodeRegistries } from './node-registries';\nimport { initialData } from './initial-data';\nimport { useEditorProps } from './hooks/use-editor-props';\nimport { FLOW_LIST } from './data';\nimport { Tools } from './components/tools';\nimport { NodeAddPanel } from './components/node-add-panel';\nimport { Minimap } from './components/minimap';\nimport { FlowSelect } from './components/flow-select';\n\nexport const Editor = (props: { demo?: string; hideTools?: boolean }) => {\n  const editorProps = useEditorProps(\n    props.demo ? FLOW_LIST[props.demo] : initialData,\n    nodeRegistries\n  );\n  return (\n    <FixedLayoutEditorProvider {...editorProps}>\n      <div className=\"demo-fixed-container\">\n        <div className=\"demo-fixed-layout\">\n          {!props.hideTools ? <NodeAddPanel /> : null}\n          <EditorRenderer className=\"demo-fixed-editor\">\n            {/* add child panel here */}\n          </EditorRenderer>\n        </div>\n      </div>\n      {!props.hideTools ? (\n        <>\n          <Tools />\n          <FlowSelect />\n          <Minimap />\n        </>\n      ) : null}\n    </FixedLayoutEditorProvider>\n  );\n};\n",active:!0},f=()=>(0,l.jsx)("div",{style:{zIndex:1,position:"relative"},children:(0,l.jsx)(o.g,{files:{"editor.tsx":m,"index.css":u,"initial-data.ts":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\nimport { condition as conditionDemo } from './data/condition';\n\n/**\n * Initial Data\n */\nexport const initialData: FlowDocumentJSON = conditionDemo;\n","node-registries.ts":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { nanoid } from 'nanoid';\nimport { FlowNodeRegistry } from '@flowgram.ai/fixed-layout-editor';\n\n/**\n * 自定义节点注册\n */\nexport const nodeRegistries: FlowNodeRegistry[] = [\n  {\n    /**\n     * 自定义节点类型\n     */\n    type: 'condition',\n    /**\n     * 自定义节点扩展:\n     *  - loop: 扩展为循环节点\n     *  - start: 扩展为开始节点\n     *  - dynamicSplit: 扩展为分支节点\n     *  - end: 扩展为结束节点\n     *  - tryCatch: 扩展为 tryCatch 节点\n     *  - break: 分支断开\n     *  - default: 扩展为普通节点 (默认)\n     */\n    extend: 'dynamicSplit',\n    /**\n     * 节点配置信息\n     */\n    meta: {\n      // isStart: false, // 是否为开始节点\n      // isNodeEnd: false, // 是否为结束节点，结束节点后边无法再添加节点\n      // draggable: false, // 是否可拖拽，如开始节点和结束节点无法拖拽\n      // selectable: false, // 触发器等开始节点不能被框选\n      // deleteDisable: true, // 禁止删除\n      // copyDisable: true, // 禁止copy\n      // addDisable: true, // 禁止添加\n    },\n    onAdd() {\n      return {\n        id: `condition_${nanoid(5)}`,\n        type: 'condition',\n        data: {\n          title: 'Condition',\n        },\n        blocks: [\n          {\n            id: nanoid(5),\n            type: 'block',\n            data: {\n              title: 'If_0',\n            },\n          },\n          {\n            id: nanoid(5),\n            type: 'block',\n            data: {\n              title: 'If_1',\n            },\n          },\n        ],\n      };\n    },\n  },\n  {\n    type: 'custom',\n    meta: {},\n    onAdd() {\n      return {\n        id: `custom_${nanoid(5)}`,\n        type: 'custom',\n        data: {\n          title: 'Custom',\n          content: 'this is custom content',\n        },\n      };\n    },\n  },\n];\n","use-editor-props.tsx":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { useMemo } from 'react';\n\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\nimport { defaultFixedSemiMaterials } from '@flowgram.ai/fixed-semi-materials';\nimport {\n  Field,\n  type FixedLayoutProps,\n  FlowDocumentJSON,\n  FlowNodeRegistry,\n  FlowRendererKey,\n  FlowTextKey,\n} from '@flowgram.ai/fixed-layout-editor';\n\nimport { SlotAdder } from '../components/slot-adder';\nimport { NodeAdder } from '../components/node-adder';\nimport { BranchAdder } from '../components/branch-adder';\nimport { BaseNode } from '../components/base-node';\n\n/** semi materials */\n\nexport function useEditorProps(\n  initialData: FlowDocumentJSON, // 初始化数据\n  nodeRegistries: FlowNodeRegistry[] // 节点定义\n): FixedLayoutProps {\n  return useMemo<FixedLayoutProps>(\n    () => ({\n      /**\n       * Whether to enable the background\n       */\n      background: true,\n      /**\n       * Whether it is read-only or not, the node cannot be dragged in read-only mode\n       */\n      readonly: false,\n      /**\n       * Initial data\n       * 初始化数据\n       */\n      initialData,\n      /**\n       * 画布节点定义\n       */\n      nodeRegistries,\n      /**\n       * Get the default node registry, which will be merged with the 'nodeRegistries'\n       * 提供默认的节点注册，这个会和 nodeRegistries 做合并\n       */\n      getNodeDefaultRegistry(type) {\n        return {\n          type,\n          meta: {\n            defaultExpanded: true,\n          },\n          formMeta: {\n            /**\n             * Render form\n             */\n            render: () => (\n              <>\n                <Field<string> name=\"title\">\n                  {({ field }) => <div className=\"demo-fixed-node-title\">{field.value}</div>}\n                </Field>\n                <div className=\"demo-fixed-node-content\">\n                  <Field<string> name=\"content\">\n                    <input />\n                  </Field>\n                </div>\n              </>\n            ),\n          },\n        };\n      },\n      /**\n       * Materials, components can be customized based on the key\n       * @see https://github.com/bytedance/flowgram.ai/blob/main/packages/materials/fixed-semi-materials/src/components/index.tsx\n       * 可以通过 key 自定义 UI 组件\n       */\n      materials: {\n        components: {\n          ...defaultFixedSemiMaterials,\n          /**\n           * Components can be customized based on key business-side requirements.\n           * 这里可以根据 key 业务侧定制组件\n           */\n          [FlowRendererKey.ADDER]: NodeAdder,\n          [FlowRendererKey.BRANCH_ADDER]: BranchAdder,\n          [FlowRendererKey.SLOT_ADDER]: SlotAdder,\n          // [FlowRendererKey.DRAG_NODE]: DragNode,\n        },\n        renderDefaultNode: BaseNode, // 节点渲染\n        renderTexts: {\n          [FlowTextKey.LOOP_END_TEXT]: 'loop end',\n          [FlowTextKey.LOOP_TRAVERSE_TEXT]: 'looping',\n        },\n      },\n      /**\n       * Drag/Drop config\n       */\n      dragdrop: {\n        /**\n         * Callback when drag drop\n         */\n        onDrop: (ctx, dropData) => {\n          // console.log(\n          //   '>>> onDrop: ',\n          //   dropData.dropNode.id,\n          //   dropData.dragNodes.map(n => n.id),\n          // );\n        },\n        canDrop: (ctx, dropData) => {\n          // dropData.dragjson\n          console.log('>>> canDrop: ', dropData.isBranch, dropData.dropNode.id, dropData.dragNodes);\n          return true;\n        },\n      },\n      /**\n       * Node engine enable, you can configure formMeta in the FlowNodeRegistry\n       */\n      nodeEngine: {\n        enable: true,\n      },\n      history: {\n        enable: true,\n        enableChangeNode: true, // Listen Node engine data change\n        onApply(ctx, opt) {\n          // Listen change to trigger auto save\n          console.log('auto save: ', ctx.document.toJSON(), opt);\n        },\n      },\n      /**\n       * Playground init\n       * 画布初始化\n       */\n      onInit: (ctx) => {\n        /**\n         * Data can also be dynamically loaded via fromJSON\n         * 也可以通过 fromJSON 动态加载数据\n         */\n        // ctx.document.fromJSON(initialData)\n        console.log('---- Playground Init ----');\n      },\n      /**\n       * Playground render\n       */\n      onAllLayersRendered: (ctx) => {\n        setTimeout(() => {\n          ctx.playground.config.fitView(ctx.document.root.bounds.pad(30));\n        }, 10);\n      },\n      /**\n       * Playground dispose\n       * 画布销毁\n       */\n      onDispose: () => {\n        console.log('---- Playground Dispose ----');\n      },\n      /**\n       * 节点数据转换, 由 ctx.document.fromJSON 调用\n       * Node data transformation, called by ctx.document.fromJSON\n       * @param node\n       * @param json\n       */\n      fromNodeJSON(node, json) {\n        return json;\n      },\n      /**\n       * 节点数据转换, 由 ctx.document.toJSON 调用\n       * Node data transformation, called by ctx.document.toJSON\n       * @param node\n       * @param json\n       */\n      toNodeJSON(node, json) {\n        return json;\n      },\n      plugins: () => [\n        /**\n         * Minimap plugin\n         * 缩略图插件\n         */\n        createMinimapPlugin({\n          disableLayer: true,\n          enableDisplayAllNodes: true,\n          canvasStyle: {\n            canvasWidth: 182,\n            canvasHeight: 102,\n            canvasPadding: 50,\n            canvasBackground: 'rgba(245, 245, 245, 1)',\n            canvasBorderRadius: 10,\n            viewportBackground: 'rgba(235, 235, 235, 1)',\n            viewportBorderRadius: 4,\n            viewportBorderColor: 'rgba(201, 201, 201, 1)',\n            viewportBorderWidth: 1,\n            viewportBorderDashLength: 2,\n            nodeColor: 'rgba(255, 255, 255, 1)',\n            nodeBorderRadius: 2,\n            nodeBorderWidth: 0.145,\n            nodeBorderColor: 'rgba(6, 7, 9, 0.10)',\n            overlayColor: 'rgba(255, 255, 255, 0)',\n          },\n        }),\n      ],\n    }),\n    []\n  );\n}\n","base-node.tsx":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { FlowNodeEntity, useNodeRender, useClientContext } from '@flowgram.ai/fixed-layout-editor';\nimport { IconDeleteStroked } from '@douyinfe/semi-icons';\n\nexport const BaseNode = ({ node }: { node: FlowNodeEntity }) => {\n  const ctx = useClientContext();\n  /**\n   * Provides methods related to node rendering\n   * 提供节点渲染相关的方法\n   */\n  const nodeRender = useNodeRender();\n  /**\n   * It can only be used when nodeEngine is enabled\n   * 只有在节点引擎开启时候才能使用表单\n   */\n  const form = nodeRender.form;\n\n  return (\n    <div\n      className=\"demo-fixed-node\"\n      /*\n       * onMouseEnter is added to a fixed layout node primarily to listen for hover highlighting of branch lines\n       * onMouseEnter 加到固定布局节点主要是为了监听 分支线条的 hover 高亮\n       **/\n      onMouseEnter={nodeRender.onMouseEnter}\n      onMouseLeave={nodeRender.onMouseLeave}\n      onMouseDown={(e) => {\n        // trigger drag node\n        nodeRender.startDrag(e);\n        e.stopPropagation();\n      }}\n      style={{\n        /**\n         * Lets you precisely control the style of branch nodes\n         * 用于精确控制分支节点的样式\n         * isBlockIcon: 整个 condition 分支的 头部节点\n         * isBlockOrderIcon: 分支的第一个节点\n         */\n        opacity: nodeRender.dragging ? 0.3 : 1,\n        ...(nodeRender.isBlockOrderIcon || nodeRender.isBlockIcon ? { width: 260 } : {}),\n      }}\n    >\n      {!nodeRender.readonly && (\n        <IconDeleteStroked\n          style={{ position: 'absolute', right: 4, top: 4 }}\n          onClick={() => ctx.operation.deleteNode(nodeRender.node)}\n        />\n      )}\n      {form?.render()}\n    </div>\n  );\n};\n","branch-adder.tsx":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { nanoid } from 'nanoid';\nimport { type FlowNodeEntity, useClientContext } from '@flowgram.ai/fixed-layout-editor';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\ninterface PropsType {\n  activated?: boolean;\n  node: FlowNodeEntity;\n}\n\nexport function BranchAdder(props: PropsType) {\n  const { activated, node } = props;\n  const nodeData = node.firstChild!.renderData;\n  const ctx = useClientContext();\n  const { operation, playground } = ctx;\n  const { isVertical } = node;\n\n  function addBranch() {\n    let block: FlowNodeEntity;\n    if (node.flowNodeType === 'multiOutputs') {\n      block = operation.addBlock(node, {\n        id: `output_${nanoid(5)}`,\n        type: 'output',\n        data: {\n          title: 'New Ouput',\n          content: '',\n        },\n      });\n    } else if (node.flowNodeType === 'multiInputs') {\n      block = operation.addBlock(node, {\n        id: `input_${nanoid(5)}`,\n        type: 'input',\n        data: {\n          title: 'New Input',\n          content: '',\n        },\n      });\n    } else {\n      block = operation.addBlock(node, {\n        id: `branch_${nanoid(5)}`,\n        type: 'block',\n        data: {\n          title: 'New Branch',\n          content: '',\n        },\n      });\n    }\n\n    setTimeout(() => {\n      playground.scrollToView({\n        bounds: block.bounds,\n        scrollToCenter: true,\n      });\n    }, 10);\n  }\n\n  if (playground.config.readonlyOrDisabled) return null;\n\n  const className = [\n    'demo-fixed-adder',\n    isVertical ? '' : 'isHorizontal',\n    activated ? 'activated' : '',\n  ].join(' ');\n\n  return (\n    <div\n      className={className}\n      onMouseEnter={() => nodeData?.toggleMouseEnter()}\n      onMouseLeave={() => nodeData?.toggleMouseLeave()}\n    >\n      <div\n        onClick={() => {\n          addBranch();\n        }}\n        aria-hidden=\"true\"\n        style={{ flexGrow: 1, textAlign: 'center' }}\n      >\n        <IconPlus />\n      </div>\n    </div>\n  );\n}\n","minimap.tsx":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { MinimapRender } from '@flowgram.ai/minimap-plugin';\n\nexport const Minimap = () => (\n  <div\n    style={{\n      position: 'absolute',\n      left: 16,\n      bottom: 51,\n      zIndex: 100,\n      width: 198,\n    }}\n  >\n    <MinimapRender\n      containerStyles={{\n        pointerEvents: 'auto',\n        position: 'relative',\n        top: 'unset',\n        right: 'unset',\n        bottom: 'unset',\n        left: 'unset',\n      }}\n      inactiveStyle={{\n        opacity: 1,\n        scale: 1,\n        translateX: 0,\n        translateY: 0,\n      }}\n    />\n  </div>\n);\n","node-adder.tsx":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { FlowNodeEntity, useClientContext, usePlayground } from '@flowgram.ai/fixed-layout-editor';\nimport { Dropdown } from '@douyinfe/semi-ui';\nimport { IconPlusCircle } from '@douyinfe/semi-icons';\n\nimport { nodeRegistries } from '../node-registries';\nimport { useAddNode } from '../hooks/use-add-node';\n\nexport const NodeAdder = (props: {\n  from: FlowNodeEntity;\n  to?: FlowNodeEntity;\n  hoverActivated: boolean;\n}) => {\n  const { from, hoverActivated } = props;\n  const playground = usePlayground();\n  const context = useClientContext();\n\n  const { handleAdd } = useAddNode();\n\n  if (playground.config.readonlyOrDisabled) return null;\n\n  return (\n    <Dropdown\n      render={\n        <Dropdown.Menu>\n          {nodeRegistries.map((registry) => (\n            <Dropdown.Item\n              key={registry.type}\n              onClick={() => {\n                const props = registry?.onAdd(context, from);\n                handleAdd(props, from);\n              }}\n            >\n              {registry.type}\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      }\n    >\n      <div\n        style={{\n          width: hoverActivated ? 15 : 6,\n          height: hoverActivated ? 15 : 6,\n          backgroundColor: 'rgb(143, 149, 158)',\n          color: '#fff',\n          borderRadius: '50%',\n          cursor: 'pointer',\n        }}\n      >\n        {hoverActivated ? (\n          <IconPlusCircle\n            style={{\n              color: '#3370ff',\n              backgroundColor: '#fff',\n              borderRadius: 15,\n            }}\n          />\n        ) : null}\n      </div>\n    </Dropdown>\n  );\n};\n","tools.tsx":"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { useEffect, useState, useCallback } from 'react';\n\nimport { usePlaygroundTools, useClientContext, useRefresh } from '@flowgram.ai/fixed-layout-editor';\nimport { IconButton, Space } from '@douyinfe/semi-ui';\nimport { IconUnlock, IconLock } from '@douyinfe/semi-icons';\n\nexport function Tools() {\n  const { history, playground } = useClientContext();\n  const tools = usePlaygroundTools();\n  const refresh = useRefresh();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n  const toggleReadonly = useCallback(() => {\n    playground.config.readonly = !playground.config.readonly;\n  }, [playground]);\n\n  useEffect(() => {\n    const disposable = history.undoRedoService.onChange(() => {\n      setCanUndo(history.canUndo());\n      setCanRedo(history.canRedo());\n    });\n    return () => disposable.dispose();\n  }, [history]);\n\n  useEffect(() => {\n    const disposable = playground.config.onReadonlyOrDisabledChange(() => refresh());\n    return () => disposable.dispose();\n  }, [playground]);\n\n  return (\n    <Space\n      style={{ position: 'absolute', zIndex: 10, bottom: 16, left: 16, display: 'flex', gap: 8 }}\n    >\n      <button onClick={() => tools.zoomin()}>ZoomIn</button>\n      <button onClick={() => tools.zoomout()}>ZoomOut</button>\n      <button onClick={() => tools.fitView()}>Fitview</button>\n      <button onClick={() => tools.changeLayout()}>ChangeLayout</button>\n      <button onClick={() => history.undo()} disabled={!canUndo}>\n        Undo\n      </button>\n      <button onClick={() => history.redo()} disabled={!canRedo}>\n        Redo\n      </button>\n      {playground.config.readonly ? (\n        <IconButton\n          theme=\"borderless\"\n          type=\"tertiary\"\n          icon={<IconLock />}\n          onClick={toggleReadonly}\n        />\n      ) : (\n        <IconButton\n          theme=\"borderless\"\n          type=\"tertiary\"\n          icon={<IconUnlock />}\n          onClick={toggleReadonly}\n        />\n      )}\n      <span>{Math.floor(tools.zoom * 100)}%</span>\n    </Space>\n  );\n}\n"},previewStyle:{height:500},editorStyle:{height:500},children:(0,l.jsx)(c,{})})});var y=t(649414),g=t(262922);let h={code:`import {
  Field,
  FieldRenderProps,
  FormMeta,
  ValidateTrigger,
} from '@flowgram.ai/free-layout-editor';
import { Input } from '@douyinfe/semi-ui';

// FieldWrapper is not provided by sdk, it can be customized
import { FieldWrapper } from './components';

const render = () => (
  <div className="demo-node-content">
    <div className="demo-node-title">Basic Node</div>
    <Field name="name">
      {({ field, fieldState }: FieldRenderProps<string>) => (
        <FieldWrapper required title="Name" error={fieldState.errors?.[0]?.message}>
          <Input size={'small'} {...field} />
        </FieldWrapper>
      )}
    </Field>

    <Field name="city">
      {({ field, fieldState }: FieldRenderProps<string>) => (
        <FieldWrapper required title="City" error={fieldState.errors?.[0]?.message}>
          <Input size={'small'} {...field} />
        </FieldWrapper>
      )}
    </Field>
  </div>
);

const formMeta: FormMeta = {
  render,
  defaultValues: { name: 'Tina', city: 'Hangzhou' },
  validateTrigger: ValidateTrigger.onChange,
  validate: {
    name: ({ value }) => {
      if (!value) {
        return 'Name is required';
      }
    },
    city: ({ value }) => {
      if (!value) {
        return 'City is required';
      }
    }
  }
};



export const nodeRegistry: WorkflowNodeRegistry = {
  type: 'custom',
  meta: {},
  defaultPorts: [{ type: 'output' }, { type: 'input' }],
  formMeta
};
`,active:!0},x=()=>{let n={"node-registry.tsx":h,"initial-data.ts":{code:y.defaultInitialDataTs,active:!0},"field-wrapper.tsx":{code:y.fieldWrapperTs,active:!0},"field-wrapper.css":{code:y.fieldWrapperCss,active:!0}};return(0,l.jsx)(o.g,{files:n,previewStyle:{height:500},editorStyle:{height:500},children:(0,l.jsx)(g.M,{registry:y.DEFAULT_DEMO_REGISTRY,initialData:y.DEFAULT_INITIAL_DATA})})};var v=t(640898),b=t(653378);t(156774);let w={type:"custom",meta:{},defaultPorts:[{type:"output"},{type:"input"}],formMeta:{render:()=>(0,l.jsxs)("div",{className:"demo-node-content",children:[(0,l.jsx)("div",{className:"demo-node-title",children:"Effect Examples"}),(0,l.jsx)(v.gNt,{name:"field1",children:n=>{let{field:e}=n;return(0,l.jsx)(y.FieldWrapper,{title:"Basic effect",note:"The following field will console.log field value on value change",children:(0,l.jsx)(b.Input,{size:"small",...e})})}}),(0,l.jsx)(v.gNt,{name:"field2",children:n=>{let{field:e}=n;return(0,l.jsx)(y.FieldWrapper,{title:"Control other fields",note:"The following field will change Field 3 value on value change",children:(0,l.jsx)(b.Input,{size:"small",...e})})}}),(0,l.jsx)(v.gNt,{name:"field3",children:n=>{let{field:e}=n;return(0,l.jsx)(y.FieldWrapper,{title:"Field 3",children:(0,l.jsx)(b.Input,{size:"small",...e})})}})]}),validateTrigger:v.C$T.onChange,effect:{field1:[{event:v.zEJ.onValueChange,effect:n=>{let{value:e}=n;console.log("field1 value:",e)}}],field2:[{event:v.zEJ.onValueChange,effect:n=>{let{value:e,form:t}=n;t.setValueIn("field3","field2 value is "+e)}}]}}},D={code:`import {
  DataEvent,
  EffectFuncProps,
  Field,
  FieldRenderProps,
  FormMeta,
  ValidateTrigger,
  WorkflowNodeRegistry,
} from '@flowgram.ai/free-layout-editor';
import { FieldWrapper } from '@flowgram.ai/demo-node-form';
import { Input } from '@douyinfe/semi-ui';
import '../index.css';

const render = () => (
  <div className="demo-node-content">
    <div className="demo-node-title">Effect Examples</div>
    <Field name="field1">
      {({ field }: FieldRenderProps<string>) => (
        <FieldWrapper
          title="Basic effect"
          note={'The following field will console.log field value on value change'}
        >
          <Input size={'small'} {...field} />
        </FieldWrapper>
      )}
    </Field>

    <Field name="field2">
      {({ field }: FieldRenderProps<string>) => (
        <FieldWrapper
          title="Control other fields"
          note={'The following field will change Field 3 value on value change'}
        >
          <Input size={'small'} {...field} />
        </FieldWrapper>
      )}
    </Field>
    <Field name="field3">
      {({ field }: FieldRenderProps<string>) => (
        <FieldWrapper title="Field 3">
          <Input size={'small'} {...field} />
        </FieldWrapper>
      )}
    </Field>
  </div>
);

interface FormData {
  field1: string;
  field2: string;
  field3: string;
}

const formMeta: FormMeta<FormData> = {
  render,
  validateTrigger: ValidateTrigger.onChange,
  effect: {
    field1: [
      {
        event: DataEvent.onValueChange,
        effect: ({ value }: EffectFuncProps<string, FormData>) => {
          console.log('field1 value:', value);
        },
      },
    ],
    field2: [
      {
        event: DataEvent.onValueChange,
        effect: ({ value, form }: EffectFuncProps<string, FormData>) => {
          form.setValueIn('field3', 'field2 value is ' + value);
        },
      },
    ],
  },
};

export const nodeRegistry: WorkflowNodeRegistry = {
  type: 'custom',
  meta: {},
  defaultPorts: [{ type: 'output' }, { type: 'input' }],
  formMeta,
};

`,active:!0},I=()=>{let n={"node-registry.tsx":D,"initial-data.ts":{code:y.defaultInitialDataTs,active:!0},"field-wrapper.tsx":{code:y.fieldWrapperTs,active:!0},"field-wrapper.css":{code:y.fieldWrapperCss,active:!0}};return(0,l.jsx)(o.g,{files:n,previewStyle:{height:500},editorStyle:{height:500},children:(0,l.jsx)(g.M,{registry:w,initialData:y.DEFAULT_INITIAL_DATA})})},N={type:"custom",meta:{},defaultPorts:[{type:"output"},{type:"input"}],formMeta:{render:n=>{let{form:e}=n;return(0,l.jsxs)("div",{className:"demo-node-content",children:[(0,l.jsx)("div",{className:"demo-node-title",children:"Visibility Examples"}),(0,l.jsx)(v.gNt,{name:"country",children:n=>{let{field:e}=n;return(0,l.jsx)(y.FieldWrapper,{title:"Country",children:(0,l.jsx)(b.Input,{size:"small",...e})})}}),(0,l.jsx)(v.gNt,{name:"city",deps:["country"],children:n=>{let{field:t}=n;return e.getValueIn("country")?(0,l.jsx)(y.FieldWrapper,{title:"City",children:(0,l.jsx)(b.Input,{size:"small",...t})}):(0,l.jsx)(l.Fragment,{})}})]})}}},C={code:`import {
  Field,
  FieldRenderProps,
  FormMeta,
  WorkflowNodeRegistry,
  FormRenderProps,
} from '@flowgram.ai/free-layout-editor';
import { FieldWrapper } from '@flowgram.ai/demo-node-form';
import { Input } from '@douyinfe/semi-ui';
import '../index.css';

interface FormData {
  country: string;
  city: string;
}

const render = ({ form }: FormRenderProps<FormData>) => (
  <div className="demo-node-content">
    <div className="demo-node-title">Visibility Examples</div>
    <Field name="country">
      {({ field }: FieldRenderProps<string>) => (
        <FieldWrapper title="Country">
          <Input size={'small'} {...field} />
        </FieldWrapper>
      )}
    </Field>

    <Field name="city" deps={['country']}>
      {({ field }: FieldRenderProps<string>) =>
        form.getValueIn('country') ? (
          <FieldWrapper title="City">
            <Input size={'small'} {...field} />
          </FieldWrapper>
        ) : (
          <></>
        )
      }
    </Field>
  </div>
);

const formMeta: FormMeta<FormData> = {
  render,
};

export const nodeRegistry: WorkflowNodeRegistry = {
  type: 'custom',
  meta: {},
  defaultPorts: [{ type: 'output' }, { type: 'input' }],
  formMeta,
};
`,active:!0},P=()=>{let n={"node-registry.tsx":C,"initial-data.ts":{code:y.defaultInitialDataTs,active:!0},"field-wrapper.tsx":{code:y.fieldWrapperTs,active:!0},"field-wrapper.css":{code:y.fieldWrapperCss,active:!0}};return(0,l.jsx)(o.g,{files:n,previewStyle:{height:500},editorStyle:{height:500},children:(0,l.jsx)(g.M,{registry:N,initialData:y.DEFAULT_INITIAL_DATA})})};t(883577);let F=i.lazy(()=>Promise.all([t.e("386212"),t.e("263023")]).then(t.bind(t,242275)).then(n=>({default:n.PlaygroundEditor}))),S=()=>(0,l.jsx)(o.g,{files:{"editor.tsx":{active:!0,code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { useMemo } from 'react';\n\nimport {\n  Command,\n  PlaygroundReact,\n  PlaygroundReactContent,\n  PlaygroundReactProps,\n} from '@flowgram.ai/playground-react';\n\nimport { PlaygroundTools } from './components/playground-tools';\nimport { StaticCard, DragableCard } from './components/card';\n\n// Load style\nimport '@flowgram.ai/playground-react/index.css';\n\n/**\n * The ability to zoom to provide an infinite canvas\n */\nexport function PlaygroundEditor(props: { className?: string }) {\n  const playgroundProps = useMemo<PlaygroundReactProps>(\n    () => ({\n      background: true, // Background available\n      playground: {\n        ineractiveType: 'PAD', // MOUSE | PAD\n      },\n      // 自定义快捷键\n      shortcuts(registry, ctx) {\n        registry.addHandlers(\n          /**\n           * Zoom In\n           */\n          {\n            commandId: Command.Default.ZOOM_IN,\n            shortcuts: ['meta =', 'ctrl ='],\n            execute: () => {\n              ctx.playground.config.zoomin();\n            },\n          },\n          /**\n           * Zoom Out\n           */\n          {\n            commandId: Command.Default.ZOOM_OUT,\n            shortcuts: ['meta -', 'ctrl -'],\n            execute: () => {\n              ctx.playground.config.zoomout();\n            },\n          }\n        );\n      },\n    }),\n    []\n  );\n  /*\n   * PlaygroundReact: Canvas React containers 画布 react 容器\n   * PlaygroundReactContent: The canvas content will be scaled accordingly 画布内容，会跟着缩放\n   */\n  return (\n    <div className={props.className}>\n      <PlaygroundReact {...playgroundProps}>\n        <PlaygroundReactContent>\n          <StaticCard />\n          <DragableCard />\n        </PlaygroundReactContent>\n        <PlaygroundTools />\n      </PlaygroundReact>\n    </div>\n  );\n}\n"},"playground-tools.tsx":{code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react';\n\nimport { usePlaygroundTools } from '@flowgram.ai/playground-react';\n\nexport const PlaygroundTools: React.FC<{ minZoom?: number; maxZoom?: number }> = (props) => {\n  const tools = usePlaygroundTools(props);\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        zIndex: 100,\n        right: 40,\n        bottom: 40,\n        padding: 13,\n        border: '1px solid #ccc',\n        backgroundColor: 'white',\n        borderRadius: 8,\n        userSelect: 'none',\n        cursor: 'pointer',\n      }}\n    >\n      <button onClick={() => tools.toggleIneractiveType()}>{tools.interactiveType} Mode</button>\n      &nbsp;\n      <button onClick={() => tools.zoomout()}>Zoom Out</button>\n      &nbsp;\n      <button onClick={() => tools.zoomin()}>Zoom In</button>\n      &nbsp;\n      <span>{Math.floor(tools.zoom * 100)}%</span>\n    </div>\n  );\n};\n"},"card.tsx":{code:"/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useCallback, useState } from 'react';\n\nimport { usePlayground, usePlaygroundDrag } from '@flowgram.ai/playground-react';\n\nexport function StaticCard() {\n  return (\n    <div\n      style={{\n        width: 200,\n        height: 100,\n        position: 'absolute',\n        color: 'white',\n        backgroundColor: 'gray',\n        left: 200,\n        top: 200,\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n      }}\n    >\n      {' '}\n      Static Card\n    </div>\n  );\n}\n\nexport function DragableCard() {\n  const [pos, setPos] = useState({ x: 100, y: 50 });\n  // Used for dragging, the canvas will automatically scroll when dragged to the edge\n  // 用于拖拽，拖拽到边缘时候会自动滚动画布\n  const dragger = usePlaygroundDrag();\n  const playground = usePlayground();\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => {\n      const startPos = { x: pos.x, y: pos.y };\n      dragger.start(e, {\n        // start Drag\n        onDragStart() {\n          playground.config.grabDisable = true;\n        },\n        onDrag(dragEvent) {\n          setPos({\n            x: startPos.x + (dragEvent.endPos.x - dragEvent.startPos.x) / dragEvent.scale,\n            y: startPos.y + (dragEvent.endPos.y - dragEvent.startPos.y) / dragEvent.scale,\n          });\n        },\n        // end drag\n        onDragEnd() {\n          playground.config.grabDisable = false;\n        },\n      });\n      // e.stopPropagation();\n      // e.preventDefault();\n    },\n    [pos]\n  );\n  return (\n    <div\n      onMouseDown={handleMouseDown}\n      style={{\n        cursor: 'move',\n        width: 200,\n        height: 100,\n        position: 'absolute',\n        color: 'white',\n        backgroundColor: '#0089ff',\n        left: pos.x,\n        top: pos.y,\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n      }}\n    >\n      {' '}\n      Draggable Card\n    </div>\n  );\n}\n"}},previewStyle:{height:500,position:"relative"},editorStyle:{height:500},children:(0,l.jsx)(F,{className:"doc-infinite-canvas-preview"})})}}]);