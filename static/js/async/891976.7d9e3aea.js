"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["891976"],{862011:function(e,i,n){e.exports=n.p+"static/image/variable-code.50768a70.png"},138902:function(e,i,n){n.r(i),n.d(i,{default:()=>d});var a=n(110239),s=n(712394);let r=n.p+"static/image/en-variable-engine.67d17c31.png";var t=n(862011);let l=n.p+"static/image/en-varaible-zone.81aca57c.png";function c(e){let i={a:"a",div:"div",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(i.h1,{id:"variable-engine",children:[(0,a.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#variable-engine",children:"#"}),"Variable Engine"]}),"\n",(0,a.jsxs)(i.h2,{id:"overall-design",children:[(0,a.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#overall-design",children:"#"}),"Overall Design"]}),"\n",(0,a.jsxs)(i.h3,{id:"architecture-layers",children:[(0,a.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#architecture-layers",children:"#"}),"Architecture Layers"]}),"\n",(0,a.jsxs)(i.div,{className:"rspress-directive warning",children:[(0,a.jsx)(i.div,{className:"rspress-directive-title",children:"Architecture Layers"}),(0,a.jsxs)(i.div,{className:"rspress-directive-content",children:[(0,a.jsx)(i.p,{children:"\nThe variable engine is designed to follow the DIP (Dependency Inversion Principle). It is divided into three layers according to code stability, abstraction level, and proximity to the business:"}),(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Variable Abstraction Layer: The part with the highest level of abstraction and the most stable code in the variable architecture."}),"\n",(0,a.jsx)(i.li,{children:"Variable Implementation Layer: The part that changes significantly and usually requires adjustments between different businesses in the variable architecture."}),"\n",(0,a.jsx)(i.li,{children:"Variable Business Layer: The Facade provided to the business in the variable architecture, which interacts with the canvas engine and node engine."}),"\n"]})]})]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"Architecture Layers Diagram",src:r})}),"\n",(0,a.jsxs)(i.h3,{id:"glossary",children:[(0,a.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#glossary",children:"#"}),"Glossary"]}),"\n",(0,a.jsxs)(i.h4,{id:"-scope",children:[(0,a.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#-scope",children:"#"}),"\uD83C\uDF1F Scope"]}),"\n",(0,a.jsxs)(i.div,{className:"rspress-directive warning",children:[(0,a.jsx)(i.div,{className:"rspress-directive-title",children:"⭐️⭐️⭐️ Definition:"}),(0,a.jsxs)(i.div,{className:"rspress-directive-content",children:[(0,a.jsx)(i.p,{children:"\nA predefined space where the declaration and consumption of variables are described through an AST."}),(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Predefined space: The nature of the space is entirely defined by the business."}),"\n",(0,a.jsx)(i.li,{children:"In the low-code design state, it can be a node, a component, a right-side panel, etc."}),"\n",(0,a.jsx)(i.li,{children:"In a piece of code, it can be a single statement, a code block, a function, a file, etc."}),"\n"]})]})]}),"\n",(0,a.jsx)(i.p,{children:"What the scope space is can be defined by different businesses."}),"\n",(0,a.jsxs)(i.h4,{id:"-abstract-syntax-tree-ast",children:[(0,a.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#-abstract-syntax-tree-ast",children:"#"}),"\uD83C\uDF1F Abstract Syntax Tree (AST)"]}),"\n",(0,a.jsxs)(i.div,{className:"rspress-directive warning",children:[(0,a.jsx)(i.div,{className:"rspress-directive-title",children:"Definition:"}),(0,a.jsxs)(i.div,{className:"rspress-directive-content",children:[(0,a.jsx)(i.p,{children:"\n⭐️⭐️⭐️ A protocol that combines AST nodes in a tree structure to explicitly or implicitly perform CRUD operations on variable information."}),(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"AST nodes: Reactive protocol nodes in the AST."}),"\n",(0,a.jsx)(i.li,{children:"Explicit CRUD, e.g., the business explicitly sets the variable type of a variable."}),"\n",(0,a.jsx)(i.li,{children:"Implicit CRUD, e.g., the business declares a variable, and the variable type is automatically inferred based on its initialization parameters."}),"\n"]})]})]}),"\n",(0,a.jsxs)(i.div,{className:"rspress-directive warning",children:[(0,a.jsx)(i.div,{className:"rspress-directive-title",children:"Variable information such as variables, types, expressions, and structures within the scope... are essentially combinations of AST nodes."}),(0,a.jsx)(i.div,{className:"rspress-directive-content",children:(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Variable -> VariableDeclaration node"}),"\n",(0,a.jsx)(i.li,{children:"Expression -> Expression node"}),"\n",(0,a.jsx)(i.li,{children:"Type -> TypeNode node"}),"\n",(0,a.jsx)(i.li,{children:"Structure -> StructDeclaration node"}),"\n"]})})]}),"\n",(0,a.jsxs)(i.p,{children:["Reference link: ",(0,a.jsx)(i.a,{href:"https://ts-ast-viewer.com/",rel:"noopener noreferrer",target:"_blank",children:"https://ts-ast-viewer.com/"})]}),"\n",(0,a.jsxs)(i.h4,{id:"variable",children:[(0,a.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#variable",children:"#"}),"Variable"]}),"\n",(0,a.jsxs)(i.div,{className:"rspress-directive warning",children:[(0,a.jsx)(i.div,{className:"rspress-directive-title",children:"Definition:"}),(0,a.jsxs)(i.div,{className:"rspress-directive-content",children:[(0,a.jsx)(i.p,{children:"\nAn AST node used to declare a new variable, which points to a value that changes within a specific set of ranges through a unique identifier."}),(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"A value that changes within a specific set of ranges: The value of the variable must be within the range described by the variable type."}),"\n",(0,a.jsx)(i.li,{children:"Unique identifier: The variable must have a unique key value."}),"\n"]})]})]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"Variables in JavaScript, with a unique key + pointing to a changing value",src:t})}),"\n",(0,a.jsxs)(i.h4,{id:"variable-type",children:[(0,a.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#variable-type",children:"#"}),"Variable Type"]}),"\n",(0,a.jsxs)(i.div,{className:"rspress-directive warning",children:[(0,a.jsx)(i.div,{className:"rspress-directive-title",children:"Definition:"}),(0,a.jsxs)(i.div,{className:"rspress-directive-content",children:[(0,a.jsx)(i.p,{children:"\n⭐️⭐️⭐️ An AST node used to constrain a variable. The value of the constrained variable can only change within a pre - set set of ranges."}),(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"A variable can be bound to a variable type."}),"\n"]})]})]}),"\n",(0,a.jsx)("table",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("img",{loading:"lazy",src:"/en-variable-type1.png"})}),(0,a.jsx)("td",{children:(0,a.jsx)("img",{loading:"lazy",src:"/variable-type2.png"})})]})}),"\n",(0,a.jsxs)(i.h3,{id:"an-intuitive-understanding-of-the-variable-engine",children:[(0,a.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#an-intuitive-understanding-of-the-variable-engine",children:"#"}),"An Intuitive Understanding of the Variable Engine"]}),"\n",(0,a.jsxs)(i.div,{className:"rspress-directive warning",children:[(0,a.jsx)(i.div,{className:"rspress-directive-title",children:"Imagine a world of the variable engine:"}),(0,a.jsx)(i.div,{className:"rspress-directive-content",children:(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:'Different scopes are used to define different "countries".'}),"\n",(0,a.jsx)(i.li,{children:'Each "country" contains three main "citizens": declarations, types, and expressions.'}),"\n",(0,a.jsx)(i.li,{children:'Communication between "countries" is achieved through the scope chain.'}),"\n"]})})]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"Illustration",src:l})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["en%2Fguide%2Fconcepts%2Fvariable-engine.mdx"]={toc:[{id:"overall-design",text:"Overall Design",depth:2},{id:"architecture-layers",text:"Architecture Layers",depth:3},{id:"glossary",text:"Glossary",depth:3},{id:"-scope",text:"\uD83C\uDF1F Scope",depth:4},{id:"-abstract-syntax-tree-ast",text:"\uD83C\uDF1F Abstract Syntax Tree (AST)",depth:4},{id:"variable",text:"Variable",depth:4},{id:"variable-type",text:"Variable Type",depth:4},{id:"an-intuitive-understanding-of-the-variable-engine",text:"An Intuitive Understanding of the Variable Engine",depth:3}],title:"Variable Engine",headingTitle:"Variable Engine",frontmatter:{}}}}]);