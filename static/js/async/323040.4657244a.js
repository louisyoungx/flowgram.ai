"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["323040"],{561302:function(e,s,n){n.r(s),n.d(s,{default:()=>c});var i=n(110239),r=n(437562),a=n(441332);function o(e){let s={a:"a",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.h1,{id:"concepts",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#concepts",children:"#"}),"Concepts"]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive tip",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(s.div,{className:"rspress-directive-content",children:(0,i.jsxs)(s.p,{children:["The variable engine has many abstract concepts. This article uses \uD83C\uDF1F to mark a batch of concepts that you can ",(0,i.jsx)(s.strong,{children:"prioritize understanding"}),"."]})})]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive info",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"\uD83D\uDCD6 Quick Terminology Lookup"}),(0,i.jsx)(s.div,{className:"rspress-directive-content",children:(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#variable",children:(0,i.jsx)(s.strong,{children:"Variable"})})," \uD83C\uDF1F"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#scope-",children:(0,i.jsx)(s.strong,{children:"Scope"})})," \uD83C\uDF1F: A container that aggregates a series of variable information and maintains dependencies with other scopes."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#ast-",children:(0,i.jsx)(s.strong,{children:"AST"})})," \uD83C\uDF1F: Scopes use AST to store variable information."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#astnode",children:(0,i.jsx)(s.strong,{children:"ASTNode"})}),": The basic unit for storing variable information."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#astnodejson",children:(0,i.jsx)(s.strong,{children:"ASTNodeJSON"})}),": The JSON representation of an ASTNode."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#declaration",children:(0,i.jsx)(s.strong,{children:"Declaration"})})," \uD83C\uDF1F: Identifier + Definition."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#type",children:(0,i.jsx)(s.strong,{children:"Type"})})," \uD83C\uDF1F: Constraints on the value of a variable."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#expression",children:(0,i.jsx)(s.strong,{children:"Expression"})}),": Combines several variables in a specific way to return a new variable."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#scope-chain",children:(0,i.jsx)(s.strong,{children:"Scope Chain"})}),": Defines which scopes' variables a scope can reference."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#dependency-scope",children:(0,i.jsx)(s.strong,{children:"Dependency Scope"})}),": Which scopes' output variables a scope can access."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#covering-scope",children:(0,i.jsx)(s.strong,{children:"Covering Scope"})}),": Which scopes can access the output variables of a scope."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#node-scope",children:(0,i.jsx)(s.strong,{children:"Node Scope"})})," \uD83C\uDF1F: Can access the output variables of upstream nodes, and its output variables can also be accessed by downstream nodes."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#node-private-scope",children:(0,i.jsx)(s.strong,{children:"Node Private Scope"})}),": The node's private scope can only be accessed by the node itself or its child nodes."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"#global-scope",children:(0,i.jsx)(s.strong,{children:"Global Scope"})}),": Variables in the global scope can be accessed by all node scopes."]}),"\n"]})})]}),"\n",(0,i.jsxs)(s.h2,{id:"core-concepts",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#core-concepts",children:"#"}),"Core Concepts"]}),"\n",(0,i.jsx)(s.p,{children:"The core concepts of the variable engine can be summarized in the following diagram:"}),"\n",(0,i.jsx)("img",{src:"/variable/concept/concepts-en.png",alt:"Variable Core Concepts Relationship Diagram",width:"600"}),"\n",(0,i.jsxs)(s.h3,{id:"variable",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#variable",children:"#"}),"Variable"]}),"\n",(0,i.jsxs)(s.p,{children:["See ",(0,i.jsx)(s.a,{href:"/en/guide/variable/basic.html",children:"Variable Introduction"})," for details."]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive warning",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"⚠️ Different Focus on Variables in Design and Runtime"}),(0,i.jsx)(s.div,{className:"rspress-directive-content",children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"In process design, variables only focus on definitions, not values"}),". The value of a variable is dynamically calculated at the process's ",(0,i.jsx)(s.a,{href:"/en/guide/runtime/introduction.html",children:"runtime"}),"."]})})]}),"\n",(0,i.jsxs)(s.h3,{id:"scope-",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#scope-",children:"#"}),"Scope \uD83C\uDF1F"]}),"\n",(0,i.jsxs)(s.p,{children:["A Scope is a ",(0,i.jsx)(s.strong,{children:"container"}),": it aggregates a series of ",(0,i.jsx)(s.strong,{children:"variable information"})," and maintains ",(0,i.jsx)(s.strong,{children:"dependencies with other scopes"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"The range of a scope can be defined according to different business scenarios:"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{style:{textAlign:"left"},children:"Scene"}),(0,i.jsx)(s.th,{style:{textAlign:"left"},children:"Example"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{style:{textAlign:"left"},children:"Nodes in a process can be defined as scopes"}),(0,i.jsx)(s.td,{style:{textAlign:"left"},children:(0,i.jsx)("img",{src:"/variable/concept/scope-1.png",alt:"Node Scope",width:"600"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{style:{textAlign:"left"},children:"The global variable sidebar can also be defined as a scope"}),(0,i.jsx)(s.td,{style:{textAlign:"left"},children:(0,i.jsx)("img",{src:"/variable/concept/scope-2.png",alt:"Global Scope",width:"600"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{style:{textAlign:"left"},children:"Components (including variables) in UI editing can be defined as scopes"}),(0,i.jsx)(s.td,{style:{textAlign:"left"},children:(0,i.jsx)("img",{src:"/variable/concept/scope-3.png",alt:"Component Scope",width:"600"})})]})]})]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive warning",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"Why does FlowGram abstract the concept of a scope outside of nodes?"}),(0,i.jsx)(s.div,{className:"rspress-directive-content",children:(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"A node is not equivalent to a scope."}),"\n",(0,i.jsx)(s.li,{children:"Some scopes (e.g., global scope) are not related to nodes."}),"\n",(0,i.jsx)(s.li,{children:"A node can have multiple scopes (e.g., loop private scope)."}),"\n"]})})]}),"\n",(0,i.jsxs)(s.h3,{id:"ast-",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#ast-",children:"#"}),"AST \uD83C\uDF1F"]}),"\n",(0,i.jsxs)(s.p,{children:["A Scope stores variable information through an ",(0,i.jsx)(s.code,{children:"AST"}),"."]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive tip",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsx)(s.div,{className:"rspress-directive-content",children:(0,i.jsxs)(s.p,{children:["You can access the ",(0,i.jsx)(s.code,{children:"AST"})," tree within a scope via ",(0,i.jsx)(s.code,{children:"scope.ast"})," to perform CRUD operations on variable information."]})})]}),"\n",(0,i.jsxs)(s.h4,{id:"astnode",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#astnode",children:"#"}),"ASTNode"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"ASTNode"})," is the ",(0,i.jsx)(s.strong,{children:"basic information unit"})," used in the variable engine to ",(0,i.jsx)(s.strong,{children:"store variable information"}),". It can model various ",(0,i.jsx)(s.strong,{children:"variable information"}),", including:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Declarations"}),": such as ",(0,i.jsx)(s.code,{children:"VariableDeclaration"}),", used to declare new variables."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Types"}),": such as ",(0,i.jsx)(s.code,{children:"StringType"}),", used to represent the String type."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Expressions"}),": such as ",(0,i.jsx)(s.code,{children:"KeyPathExpression"}),", used to reference variables."]}),"\n"]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive info",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"ASTNode has the following features"}),(0,i.jsx)(s.div,{className:"rspress-directive-content",children:(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Tree Structure"}),": ",(0,i.jsx)(s.code,{children:"ASTNode"})," can be nested to form a tree (",(0,i.jsx)(s.code,{children:"AST"}),") to represent complex variable structures."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Serialization"}),": ",(0,i.jsx)(s.code,{children:"ASTNode"})," can be converted to and from JSON format (",(0,i.jsx)(s.code,{children:"ASTNodeJSON"}),") for storage or transmission."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Extensibility"}),": New features can be added by extending the ",(0,i.jsx)(s.code,{children:"ASTNode"})," base class."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Reactivity"}),": Changes in ",(0,i.jsx)(s.code,{children:"ASTNode"})," values trigger events, enabling a reactive programming model."]}),"\n"]})})]}),"\n",(0,i.jsxs)(s.h4,{id:"astnodejson",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#astnodejson",children:"#"}),"ASTNodeJSON"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"ASTNodeJSON"})," is the ",(0,i.jsx)(s.strong,{children:"pure JSON serialization"})," representation of an ",(0,i.jsx)(s.code,{children:"ASTNode"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"ASTNodeJSON"})," includes a ",(0,i.jsx)(s.code,{children:"kind"})," field to indicate the type of the ",(0,i.jsx)(s.code,{children:"ASTNode"}),":"]}),"\n",(0,i.jsx)(i.Fragment,{children:(0,i.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,i.jsxs)(s.code,{className:"language-tsx",children:[(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * Equivalent to the JavaScript code:"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * `var var_index: string`"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"{"})}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  kind"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'VariableDeclaration'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  key"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'var_index'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  type"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" { kind"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'StringType'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" }"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"}"})})]})})}),"\n",(0,i.jsxs)(s.p,{children:["When using the variable engine, users describe variable information with ",(0,i.jsx)(s.code,{children:"ASTNodeJSON"}),", which is then ",(0,i.jsx)(s.strong,{children:"instantiated"})," into an ",(0,i.jsx)(s.code,{children:"ASTNode"})," by the variable engine and added to the scope."]}),"\n",(0,i.jsx)(i.Fragment,{children:(0,i.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,i.jsxs)(s.code,{className:"language-tsx",children:[(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * Instantiate ASTNodeJSON into an ASTNode and add it to the scope using the scope.setVar method"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"const"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" variableDeclaration"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:" VariableDeclaration"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:" ="}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" scope"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".setVar"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"({"})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  kind"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'VariableDeclaration'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  key"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'var_index'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  type"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" { kind"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'StringType'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" }"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"});"})}),"\n",(0,i.jsx)(s.span,{className:"line"}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * After ASTNodeJSON is instantiated into an ASTNode, you can listen for changes reactively"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"variableDeclaration"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".onTypeChange"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"((newType) "}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"=>"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" {"})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"  console"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".log"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"("}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'Variable type changed'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" newType);"})]}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"})"})}),"\n",(0,i.jsx)(s.span,{className:"line"})]})})}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive info",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"Concept Comparison"}),(0,i.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,i.jsxs)(s.p,{children:["The relationship between ",(0,i.jsx)(s.code,{children:"ASTNodeJSON"})," and ",(0,i.jsx)(s.code,{children:"ASTNode"})," is similar to the relationship between ",(0,i.jsx)(s.code,{children:"JSX"})," and ",(0,i.jsx)(s.code,{children:"VDOM"})," in React."]}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"ASTNodeJSON"})," is instantiated into ",(0,i.jsx)(s.code,{children:"ASTNode"})," by the variable engine."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"JSX"})," is instantiated into ",(0,i.jsx)(s.code,{children:"VDOM"})," by the React engine."]}),"\n"]})]})]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive warning",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"❓ Why not use Json Schema"}),(0,i.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://json-schema.org/",rel:"noopener noreferrer",target:"_blank",children:(0,i.jsx)(s.code,{children:"Json Schema"})})," is a format for describing the structure of JSON data:"]}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"Json Schema"})," only describes the type information of a variable, while ",(0,i.jsx)(s.code,{children:"ASTNodeJSON"})," can also contain other information about the variable (e.g., its initial value)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"ASTNodeJSON"})," can be instantiated into an ",(0,i.jsx)(s.code,{children:"ASTNode"})," by the variable engine, enabling capabilities like reactive listening."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"Json Schema"})," is good at describing Json types, while ",(0,i.jsx)(s.code,{children:"ASTNodeJSON"})," can define more complex behaviors through custom extensions."]}),"\n"]}),(0,i.jsxs)(s.p,{children:["In terms of technical selection, the ",(0,i.jsx)(s.code,{children:"VariableEngine"})," requires more powerful extension and expression capabilities. Therefore, ",(0,i.jsx)(s.code,{children:"ASTNodeJSON"})," is needed to describe richer and more complex variable information, such as implementing dynamic type inference and automatic linking by defining the initial value of variables."]}),(0,i.jsxs)(s.p,{children:["However, as an industry-standard format for describing JSON types, ",(0,i.jsx)(s.code,{children:"Json Schema"})," has advantages in ease of use, cross-team communication, and ecosystem (e.g., ajv, zod). Therefore, we use Json Schema extensively in our ",(0,i.jsx)(s.a,{href:"/en/materials/introduction.html",children:(0,i.jsx)(s.strong,{children:"Materials"})})," to lower the barrier to entry."]})]})]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive tip",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,i.jsxs)(s.p,{children:["The variable engine provides ",(0,i.jsx)(s.code,{children:"ASTFactory"})," for ",(0,i.jsx)(s.strong,{children:"type-safe"})," creation of ",(0,i.jsx)(s.code,{children:"ASTNodeJSON"}),":"]}),(0,i.jsx)(i.Fragment,{children:(0,i.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,i.jsxs)(s.code,{className:"language-tsx",children:[(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"import"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" { ASTFactory } "}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"from"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" '@flowgram/editor'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:";"})]}),"\n",(0,i.jsx)(s.span,{className:"line"}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * Type-safely create a VariableDeclaration ASTNodeJSON"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" *"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * Equivalent to:"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * {"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" *   kind: 'VariableDeclaration',"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" *   key: 'var_index',"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" *   type: { kind: 'StringType' },"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * }"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"ASTFactory"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".createVariableDeclaration"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"({"})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  key"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'var_index'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  type"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" { kind"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'StringType'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" }"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"});"})})]})})})]})]}),"\n",(0,i.jsxs)(s.h3,{id:"declaration",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#declaration",children:"#"}),"Declaration"]}),"\n",(0,i.jsxs)(s.p,{children:["Declaration = Identifier (Key) + Definition. In design mode, a declaration is an ",(0,i.jsx)(s.code,{children:"ASTNode"})," that stores an identifier and its definition."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Identifier (Key): The index for accessing the declaration."}),"\n",(0,i.jsx)(s.li,{children:"Definition: The information defined by the declaration. For example, a variable's definition = type + right-hand value."}),"\n"]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive info",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"Example: Declarations in JavaScript"}),(0,i.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Variable Declaration"})," = Identifier + Variable Definition (Type + Initial Value)"]}),(0,i.jsx)(i.Fragment,{children:(0,i.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,i.jsxs)(s.code,{className:"language-javascript",children:[(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * Identifier: some_var"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * Variable Definition: type is number, initial value is 10"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"const"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" some_var"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:" ="}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" 10"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:";"})]})]})})}),(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Function Declaration"})," = Identifier + Function Definition (Function Parameters and Return Value + Function Body Implementation)"]}),(0,i.jsx)(i.Fragment,{children:(0,i.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,i.jsxs)(s.code,{className:"language-javascript",children:[(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * Identifier: add"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * Function Definition: parameters are two number variables a, b, and the return value is a number variable"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:" add"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"(a"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" b"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:")"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" {"})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"  return"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" a "}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"+"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" b;"})]}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"}"})})]})})}),(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Struct Declaration"})," = Identifier + Struct Definition (Fields + Types)"]}),(0,i.jsx)(i.Fragment,{children:(0,i.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,i.jsxs)(s.code,{className:"language-javascript",children:[(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * Identifier: Point"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * Struct Definition: fields are x, y, both of type number"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"interface"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:" Point"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" {"})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  x"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:";"})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  y"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:";"})]}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"}"})})]})})})]})]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive tip",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"The Role of Identifiers"}),(0,i.jsx)(s.div,{className:"rspress-directive-content",children:(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["The ",(0,i.jsx)(s.code,{children:"Identifier"})," is the ",(0,i.jsx)(s.strong,{children:"index"})," of a declaration, used to access the ",(0,i.jsx)(s.code,{children:"Definition"})," within the declaration."]}),"\n",(0,i.jsxs)(s.li,{children:["Example: During compilation, a programming language uses the ",(0,i.jsx)(s.code,{children:"Identifier"})," to find the type ",(0,i.jsx)(s.code,{children:"Definition"})," of a variable for type checking."]}),"\n"]})})]}),"\n",(0,i.jsxs)(s.p,{children:["The variable engine currently only provides ",(0,i.jsx)(s.strong,{children:"variable field declaration"})," (",(0,i.jsx)(s.code,{children:"BaseVariableField"}),"), and extends it to two types of declarations: ",(0,i.jsx)(s.strong,{children:"variable declaration"})," (",(0,i.jsx)(s.code,{children:"VariableDeclaration"}),") and ",(0,i.jsx)(s.strong,{children:"property declaration"})," (",(0,i.jsx)(s.code,{children:"Property"}),")."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Variable Field Declaration (",(0,i.jsx)(s.code,{children:"BaseVariableField"}),") = Identifier + Variable Field Definition (Type + Metadata + Initial Value)"]}),"\n",(0,i.jsxs)(s.li,{children:["Variable Declaration (",(0,i.jsx)(s.code,{children:"VariableDeclaration"}),") = ",(0,i.jsx)(s.strong,{children:"Globally Unique"})," Identifier + Variable Definition (Type + Metadata + Initial Value + Order within Scope)"]}),"\n",(0,i.jsxs)(s.li,{children:["Property Declaration (",(0,i.jsx)(s.code,{children:"Property"}),") = ",(0,i.jsx)(s.strong,{children:"Unique within Object"})," Identifier + Property Definition (Type + Metadata + Initial Value)"]}),"\n"]}),"\n",(0,i.jsxs)(s.h3,{id:"type",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#type",children:"#"}),"Type"]}),"\n",(0,i.jsxs)(s.p,{children:["Types are used to ",(0,i.jsx)(s.strong,{children:"constrain the range of variable values"}),". In design mode, a type is an ",(0,i.jsx)(s.code,{children:"ASTNode"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["The variable engine has built-in ",(0,i.jsx)(s.strong,{children:"basic types"})," from JSON:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"StringType"}),": string"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"IntegerType"}),": integer"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"NumberType"}),": floating-point number"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"BooleanType"}),": boolean"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"ObjectType"}),": object, which can be drilled down into ",(0,i.jsx)(s.code,{children:"Property"})," declarations."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"ArrayType"}),": array, which can be drilled down into other types."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"It also adds:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"MapType"}),": key-value pairs, where both keys and values can have type definitions."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"CustomType"}),": can be custom extended by the user, such as date, time, file types, etc."]}),"\n"]}),"\n",(0,i.jsxs)(s.h3,{id:"expression",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#expression",children:"#"}),"Expression"]}),"\n",(0,i.jsxs)(s.p,{children:["An expression takes ",(0,i.jsx)(s.strong,{children:"0 or more variables as input"}),", computes them in a ",(0,i.jsx)(s.strong,{children:"specific way"}),", and returns a new ",(0,i.jsx)(s.strong,{children:"variable"}),"."]}),"\n",(0,i.jsx)(a.Z,{code:"graph LR\n\nInput_Variable_1 --input--\x3e Expression\nInput_Variable_2 --input--\x3e Expression\n\nExpression --returns--\x3e Output_Variable\n\nstyle Expression stroke:#333,stroke-width:3px;",config:{}}),"\n",(0,i.jsxs)(s.p,{children:["In ",(0,i.jsx)(s.strong,{children:"design mode"}),", an expression is an ",(0,i.jsx)(s.code,{children:"ASTNode"}),". In modeling, we only need to focus on:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Which variable declarations does the expression ",(0,i.jsx)(s.strong,{children:"use"}),"?"]}),"\n",(0,i.jsxs)(s.li,{children:["How is the expression's ",(0,i.jsx)(s.strong,{children:"return type"})," inferred?"]}),"\n"]}),"\n",(0,i.jsx)(a.Z,{code:"graph LR\n\nVariable_Declaration_1 --input--\x3e Expression_in_Design_Mode\nVariable_Declaration_2 --input--\x3e Expression_in_Design_Mode\nExpression_in_Design_Mode --infers--\x3e Return_Type\n\nstyle Expression_in_Design_Mode stroke:#333,stroke-width:3px;\n",config:{}}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive info",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"Example: Expression Inference in Design Mode"}),(0,i.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,i.jsxs)(s.p,{children:["Suppose we have an expression described in JavaScript code as ",(0,i.jsx)(s.code,{children:"ref_var + 1"}),"."]}),(0,i.jsxs)(s.p,{children:["Which variable declarations does the expression ",(0,i.jsx)(s.strong,{children:"use"}),"?"]}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["The variable declaration corresponding to the ",(0,i.jsx)(s.code,{children:"ref_var"})," identifier."]}),"\n"]}),(0,i.jsxs)(s.p,{children:["How is the expression's ",(0,i.jsx)(s.strong,{children:"return type"})," inferred?"]}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["If the type of ",(0,i.jsx)(s.code,{children:"ref_var"})," is ",(0,i.jsx)(s.code,{children:"IntegerType"}),", the return type of ",(0,i.jsx)(s.code,{children:"ref_var + 1"})," is ",(0,i.jsx)(s.code,{children:"IntegerType"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["If the type of ",(0,i.jsx)(s.code,{children:"ref_var"})," is ",(0,i.jsx)(s.code,{children:"NumberType"}),", the return type of ",(0,i.jsx)(s.code,{children:"ref_var + 1"})," is ",(0,i.jsx)(s.code,{children:"NumberType"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["If the type of ",(0,i.jsx)(s.code,{children:"ref_var"})," is ",(0,i.jsx)(s.code,{children:"StringType"}),", the return type of ",(0,i.jsx)(s.code,{children:"ref_var + 1"})," is ",(0,i.jsx)(s.code,{children:"StringType"}),"."]}),"\n"]})]})]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive info",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"Example: How the Variable Engine Implements Type Inference + Linking"}),(0,i.jsx)(s.div,{className:"rspress-directive-content",children:(0,i.jsxs)("div",{style:{},children:[(0,i.jsx)("div",{style:{width:500},children:(0,i.jsx)("img",{loading:"lazy",src:"/variable/variable-batch-auto-infer.gif",alt:"Automatic Type Inference",style:{width:"100%"}})}),(0,i.jsxs)("div",{style:{minWidth:500},children:[(0,i.jsxs)(s.p,{children:["The figure shows a common example: a batch processing node references the output variable of a preceding node, iterates over it, and obtains an ",(0,i.jsx)(s.code,{children:"item"})," variable. The type of the ",(0,i.jsx)(s.code,{children:"item"})," variable automatically changes with the type of the output variable of the preceding node."]}),(0,i.jsx)(s.p,{children:"The ASTNodeJSON for this example can be represented as:"}),(0,i.jsx)(i.Fragment,{children:(0,i.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,i.jsxs)(s.code,{className:"language-tsx",children:[(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"ASTFactory"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".createVariableDeclaration"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"({"})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  key"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'item'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  initializer"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" ASTFactory"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".createEnumerateExpression"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"({"})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"    enumerateFor"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" ASTFactory"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".createKeyPathExpression"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"({"})]}),"\n",(0,i.jsxs)(s.span,{className:"line",children:[(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"      keyPath"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" ["}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'start_0'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'arr'"}),(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"]"})]}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"    })"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  })"})}),"\n",(0,i.jsx)(s.span,{className:"line",children:(0,i.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"})"})})]})})}),(0,i.jsx)(s.p,{children:"The type inference chain is as follows:"}),(0,i.jsx)(a.Z,{code:'graph LR\n\n  Array_String["Array&lt;String&gt;"]\n  Ref_Var["Variable with type\n Array&lt;String&gt;"]\n\n  VariableDeclaration --initializer--\x3e EnumerateExpression\n  KeyPathExpression --references--\x3e Ref_Var\n  KeyPathExpression --return type--\x3e Array_String\n  EnumerateExpression --iterates over--\x3e KeyPathExpression\n  EnumerateExpression --return type--\x3e String\n  VariableDeclaration -.inferred type.-> String\n  Array_String -.extracts subtype via iteration.-> String\n  Ref_Var -.type.-> Array_String\n',config:{}})]})]})})]}),"\n",(0,i.jsxs)(s.h3,{id:"scope-chain",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#scope-chain",children:"#"}),"Scope Chain"]}),"\n",(0,i.jsxs)(s.p,{children:["The Scope Chain defines ",(0,i.jsx)(s.strong,{children:"which scopes' variables a scope can reference"}),". It is an abstract class, and specific business scenarios can implement custom scope chains."]}),"\n",(0,i.jsxs)(s.p,{children:["The variable engine has built-in implementations for two types of scope chains: ",(0,i.jsx)(s.strong,{children:"free-layout scope chain"})," and ",(0,i.jsx)(s.strong,{children:"fixed-layout scope chain"}),"."]}),"\n",(0,i.jsxs)(s.h4,{id:"dependency-scope",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#dependency-scope",children:"#"}),"Dependency Scope"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Dependency Scope"})," = Which scopes' output variables a scope can access."]}),"\n",(0,i.jsxs)(s.p,{children:["You can access a scope's ",(0,i.jsx)(s.code,{children:"Dependency Scope"})," via ",(0,i.jsx)(s.code,{children:"scope.depScopes"}),"."]}),"\n",(0,i.jsxs)(s.h4,{id:"covering-scope",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#covering-scope",children:"#"}),"Covering Scope"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Covering Scope"})," = Which scopes can access the output variables of a scope."]}),"\n",(0,i.jsxs)(s.p,{children:["You can access a scope's ",(0,i.jsx)(s.code,{children:"Covering Scope"})," via ",(0,i.jsx)(s.code,{children:"scope.coverScopes"}),"."]}),"\n",(0,i.jsxs)(s.h2,{id:"variables-in-the-canvas",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#variables-in-the-canvas",children:"#"}),"Variables in the Canvas"]}),"\n",(0,i.jsx)(s.p,{children:"FlowGram defines the following special types of scopes in the canvas:"}),"\n",(0,i.jsxs)(s.h3,{id:"node-scope",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#node-scope",children:"#"}),"Node Scope"]}),"\n",(0,i.jsxs)(s.p,{children:["Also known as ",(0,i.jsx)(s.code,{children:"Node Public Scope"}),", this scope can access the variables of the ",(0,i.jsx)(s.code,{children:"Node Scope"})," of ",(0,i.jsx)(s.strong,{children:"upstream nodes"}),", and its output variable declarations can also be accessed by the ",(0,i.jsx)(s.code,{children:"Node Scope"})," of ",(0,i.jsx)(s.strong,{children:"downstream nodes"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"Node Scope"})," can be set and retrieved via ",(0,i.jsx)(s.code,{children:"node.scope"}),". Its scope chain relationship is shown in the figure below:"]}),"\n",(0,i.jsx)(a.Z,{code:'graph BT\n\n  subgraph Current_Node\n    Child_Node_1.scope\n    Child_Node_2.scope\n    Current_Node.scope\n  end\n\n  Child_Node_1.scope -.depends on.-> Upstream_Node.scope\n  Child_Node_2.scope -.depends on.-> Upstream_Node.scope\n  Current_Node.scope -.depends on.-> Upstream_Node.scope\n  Downstream_Node.scope -.depends on.-> Upstream_Node.scope\n  Downstream_Node.scope -.depends on.-> Current_Node.scope\n\n  Downstream_Node.scope -.-|"<font color=red>❌ Not accessible</font>"| Child_Node_1.scope\n  Downstream_Node.scope -.-|"<font color=red>❌ Not accessible</font>"| Child_Node_2.scope\n\n  linkStyle 5 stroke:red,stroke-width:2px\n  linkStyle 6 stroke:red,stroke-width:2px\n\n\n  style Current_Node.scope fill:#f9f,stroke:#333,stroke-width:3px',config:{}}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive warning",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"WARNING"}),(0,i.jsx)(s.div,{className:"rspress-directive-content",children:(0,i.jsxs)(s.p,{children:["In the default scope logic, the output variables of a child node's ",(0,i.jsx)(s.code,{children:"Node Scope"})," cannot be accessed by the ",(0,i.jsx)(s.strong,{children:"downstream nodes of the parent node"}),"."]})})]}),"\n",(0,i.jsxs)(s.h3,{id:"node-private-scope",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#node-private-scope",children:"#"}),"Node Private Scope"]}),"\n",(0,i.jsxs)(s.p,{children:["The output variables of a ",(0,i.jsx)(s.code,{children:"Node Private Scope"})," can only be accessed within the ",(0,i.jsx)(s.strong,{children:"current node's"})," ",(0,i.jsx)(s.code,{children:"Node Scope"})," and its ",(0,i.jsx)(s.strong,{children:"child nodes'"})," ",(0,i.jsx)(s.code,{children:"Node Scope"}),". This is similar to the concept of ",(0,i.jsx)(s.code,{children:"private variables"})," in programming languages."]}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"Node Private Scope"})," can be set and retrieved via ",(0,i.jsx)(s.code,{children:"node.privateScope"}),". Its scope chain relationship is shown in the figure below:"]}),"\n",(0,i.jsx)(a.Z,{code:"graph BT\n  subgraph Current_Node\n    Child_Node_1.scope -.depends on.-> Current_Node.privateScope\n    Current_Node.scope -.depends on.-> Current_Node.privateScope\n    Child_Node_2.scope -.depends on.-> Current_Node.privateScope\n  end\n\n  Current_Node -.all depend on.-> Upstream_Node.scope\n  Downstream_Node.scope -.depends on.-> Current_Node.scope\n  Downstream_Node.scope -.depends on.-> Upstream_Node.scope\n\n\n  style Current_Node.privateScope fill:#f9f,stroke:#333,stroke-width:3px\n  style Current_Node.scope stroke:#333,stroke-width:3px",config:{}}),"\n",(0,i.jsxs)(s.h3,{id:"global-scope",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#global-scope",children:"#"}),"Global Scope"]}),"\n",(0,i.jsxs)(s.p,{children:["Variables in the ",(0,i.jsx)(s.code,{children:"Global Scope"})," can be accessed by ",(0,i.jsx)(s.strong,{children:"all node scopes and node private scopes"}),", but it cannot access variables from other scopes."]}),"\n",(0,i.jsxs)(s.p,{children:["For how to set the global scope, see ",(0,i.jsx)(s.a,{href:"/en/guide/variable/variable-output.html#output-global-variables",children:"Output Global Variables"}),". Its scope chain relationship is shown in the figure below:"]}),"\n",(0,i.jsx)(a.Z,{code:"graph RL\n\n subgraph Current_Node\n    Child_Node_1.scope\n    Child_Node_2.scope\n    Current_Node.scope\n    Current_Node.privateScope\n  end\n\n  Current_Node.scope -.depends on.-> Global_Scope\n  Upstream_Node.scope -.depends on.-> Global_Scope\n  Downstream_Node.scope -.depends on.-> Global_Scope\n  Current_Node.privateScope -.depends on.-> Global_Scope\n  Child_Node_1.scope -.depends on.-> Global_Scope\n  Child_Node_2.scope -.depends on.-> Global_Scope\n\n  style Current_Node.scope stroke:#333,stroke-width:3px\n  style Global_Scope fill:#f9f,stroke:#333,stroke-width:3px\n",config:{}}),"\n",(0,i.jsxs)(s.h2,{id:"overall-architecture",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#overall-architecture",children:"#"}),"Overall Architecture"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{src:"/variable/concept/arch-en.png",alt:"Architecture Diagram"})}),"\n",(0,i.jsx)(s.p,{children:"The variable engine is designed following the DIP (Dependency Inversion Principle) and is divided into three layers according to code stability, abstraction level, and proximity to the business:"}),"\n",(0,i.jsxs)(s.h3,{id:"variable-abstraction-layer",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#variable-abstraction-layer",children:"#"}),"Variable Abstraction Layer"]}),"\n",(0,i.jsxs)(s.p,{children:["This is the highest abstraction level in the variable architecture and the most stable part of the code. The abstraction layer defines abstract classes for core concepts such as ",(0,i.jsx)(s.code,{children:"ASTNode"}),", ",(0,i.jsx)(s.code,{children:"Scope"}),", and ",(0,i.jsx)(s.code,{children:"ScopeChain"}),"."]}),"\n",(0,i.jsxs)(s.h3,{id:"variable-implementation-layer",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#variable-implementation-layer",children:"#"}),"Variable Implementation Layer"]}),"\n",(0,i.jsxs)(s.p,{children:["This part of the variable architecture changes more frequently and may be adjusted for different business needs. The engine has a built-in set of stable ",(0,i.jsx)(s.code,{children:"ASTNode"})," implementations and ",(0,i.jsx)(s.code,{children:"ScopeChain"})," implementations. When users have complex variable requirements, they can register new ",(0,i.jsx)(s.code,{children:"ASTNode"}),"s or override existing ",(0,i.jsx)(s.code,{children:"ASTNode"}),"s through dependency injection for customization."]}),"\n",(0,i.jsxs)(s.h3,{id:"variable-material-layer",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#variable-material-layer",children:"#"}),"Variable Material Layer"]}),"\n",(0,i.jsx)(s.p,{children:"Based on the Facade pattern, this layer improves the usability of variables by encapsulating complex variable logic into simple, out-of-the-box variable materials."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["For the use of variable materials, see: ",(0,i.jsx)(s.a,{href:"/en/materials/introduction.html",children:"Materials"})]}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["en%2Fguide%2Fvariable%2Fconcept.mdx"]={toc:[{id:"core-concepts",text:"Core Concepts",depth:2},{id:"variable",text:"Variable",depth:3},{id:"scope-",text:"Scope \uD83C\uDF1F",depth:3},{id:"ast-",text:"AST \uD83C\uDF1F",depth:3},{id:"astnode",text:"ASTNode",depth:4},{id:"astnodejson",text:"ASTNodeJSON",depth:4},{id:"declaration",text:"Declaration",depth:3},{id:"type",text:"Type",depth:3},{id:"expression",text:"Expression",depth:3},{id:"scope-chain",text:"Scope Chain",depth:3},{id:"dependency-scope",text:"Dependency Scope",depth:4},{id:"covering-scope",text:"Covering Scope",depth:4},{id:"variables-in-the-canvas",text:"Variables in the Canvas",depth:2},{id:"node-scope",text:"Node Scope",depth:3},{id:"node-private-scope",text:"Node Private Scope",depth:3},{id:"global-scope",text:"Global Scope",depth:3},{id:"overall-architecture",text:"Overall Architecture",depth:2},{id:"variable-abstraction-layer",text:"Variable Abstraction Layer",depth:3},{id:"variable-implementation-layer",text:"Variable Implementation Layer",depth:3},{id:"variable-material-layer",text:"Variable Material Layer",depth:3}],title:"Concepts",headingTitle:"Concepts",frontmatter:{description:"Introduces the core concepts of the variable engine."}}}}]);