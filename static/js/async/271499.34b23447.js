"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["271499"],{285724:function(e,s,n){n.r(s),n.d(s,{default:()=>d});var r=n(110239),i=n(437562),l=n(441332);function c(e){let s={a:"a",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h1,{id:"概念",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#概念",children:"#"}),"概念"]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive tip",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsx)(s.div,{className:"rspress-directive-content",children:(0,r.jsxs)(s.p,{children:["变量引擎概念较多且抽象。本文通过 \uD83C\uDF1F 标记出了一批可以",(0,r.jsx)(s.strong,{children:"优先理解"}),"的概念。"]})})]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive info",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"\uD83D\uDCD6 术语快速查询"}),(0,r.jsx)(s.div,{className:"rspress-directive-content",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E5%8F%98%E9%87%8F",children:(0,r.jsx)(s.strong,{children:"变量"})})," \uD83C\uDF1F"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E4%BD%9C%E7%94%A8%E5%9F%9F-",children:(0,r.jsx)(s.strong,{children:"作用域"})})," \uD83C\uDF1F：一种容器，聚合了一系列变量信息，同时维护与其他作用域的依赖关系。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#ast-",children:(0,r.jsx)(s.strong,{children:"AST"})})," \uD83C\uDF1F：作用域通过 AST 存储变量信息。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#astnode",children:(0,r.jsx)(s.strong,{children:"ASTNode"})}),"：存储变量信息的基本单元。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#astnodejson",children:(0,r.jsx)(s.strong,{children:"ASTNodeJSON"})}),"：ASTNode 的 JSON 表示。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E5%A3%B0%E6%98%8E",children:(0,r.jsx)(s.strong,{children:"声明"})})," \uD83C\uDF1F：标识符 + 定义。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E7%B1%BB%E5%9E%8B",children:(0,r.jsx)(s.strong,{children:"类型"})})," \uD83C\uDF1F：变量值的约束。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E8%A1%A8%E8%BE%BE%E5%BC%8F",children:(0,r.jsx)(s.strong,{children:"表达式"})}),"：通过特定方法组合若干变量，返回一个新的变量。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE",children:(0,r.jsx)(s.strong,{children:"作用域链"})}),"：定义一个作用域可以引用哪些作用域的变量。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E4%BE%9D%E8%B5%96%E4%BD%9C%E7%94%A8%E5%9F%9F",children:(0,r.jsx)(s.strong,{children:"依赖作用域"})}),"：作用域可以访问哪些作用域的输出变量。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E8%A6%86%E7%9B%96%E4%BD%9C%E7%94%A8%E5%9F%9F",children:(0,r.jsx)(s.strong,{children:"覆盖作用域"})}),"：作用域的输出变量可以被哪些作用域访问。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E8%8A%82%E7%82%B9%E4%BD%9C%E7%94%A8%E5%9F%9F",children:(0,r.jsx)(s.strong,{children:"节点作用域"})})," \uD83C\uDF1F：可以访问上游节点的输出变量，其输出变量也可以被下游节点访问。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E8%8A%82%E7%82%B9%E7%A7%81%E6%9C%89%E4%BD%9C%E7%94%A8%E5%9F%9F",children:(0,r.jsx)(s.strong,{children:"节点私有作用域"})}),"：节点私有作用域只能被节点本身或者子节点访问。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F",children:(0,r.jsx)(s.strong,{children:"全局作用域"})}),"：所有节点的作用域都可以访问全局作用域的变量。"]}),"\n"]})})]}),"\n",(0,r.jsxs)(s.h2,{id:"核心概念",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#核心概念",children:"#"}),"核心概念"]}),"\n",(0,r.jsx)(s.p,{children:"变量引擎核心概念可以通过下图总结："}),"\n",(0,r.jsx)("img",{src:"/variable/concept/concepts-zh.png",alt:"变量核心概念关系图",width:"600"}),"\n",(0,r.jsxs)(s.h3,{id:"变量",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#变量",children:"#"}),"变量"]}),"\n",(0,r.jsxs)(s.p,{children:["详见 ",(0,r.jsx)(s.a,{href:"/guide/variable/basic.html",children:"变量介绍"})]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive warning",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"⚠️ 变量在设计和运行中的关注点不同"}),(0,r.jsx)(s.div,{className:"rspress-directive-content",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"在流程设计中，变量只关注定义，不关注值"}),"。变量的值在流程的",(0,r.jsx)(s.a,{href:"/guide/runtime/introduction.html",children:"运行时"}),"才会被动态计算。"]})})]}),"\n",(0,r.jsxs)(s.h3,{id:"作用域-",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#作用域-",children:"#"}),"作用域 \uD83C\uDF1F"]}),"\n",(0,r.jsxs)(s.p,{children:["作用域（Scope）是一种",(0,r.jsx)(s.strong,{children:"容器"}),"：容器内聚合了一系列",(0,r.jsx)(s.strong,{children:"变量信息"}),"，同时维护了",(0,r.jsx)(s.strong,{children:"与其他作用域的依赖关系"}),"。"]}),"\n",(0,r.jsx)(s.p,{children:"作用域的范围可以根据业务场景的不同约定："}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{style:{textAlign:"left"},children:"场景"}),(0,r.jsx)(s.th,{style:{textAlign:"left"},children:"示例"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{style:{textAlign:"left"},children:"流程里节点可以约定为作用域"}),(0,r.jsx)(s.td,{style:{textAlign:"left"},children:(0,r.jsx)("img",{src:"/variable/concept/scope-1.png",alt:"节点作用域",width:"600"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{style:{textAlign:"left"},children:"全局变量侧边栏也可以约定为作用域"}),(0,r.jsx)(s.td,{style:{textAlign:"left"},children:(0,r.jsx)("img",{src:"/variable/concept/scope-2.png",alt:"全局作用域",width:"600"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{style:{textAlign:"left"},children:"界面编辑里组件（含变量）可以约定为作用域"}),(0,r.jsx)(s.td,{style:{textAlign:"left"},children:(0,r.jsx)("img",{src:"/variable/concept/scope-3.png",alt:"组件作用域",width:"600"})})]})]})]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive warning",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"为什么 FlowGram 要在节点之外，新抽象一个作用域的概念？"}),(0,r.jsx)(s.div,{className:"rspress-directive-content",children:(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"节点不等同于作用域"}),"\n",(0,r.jsx)(s.li,{children:"存在一些作用域（如：全局作用域）和节点无关"}),"\n",(0,r.jsx)(s.li,{children:"一个节点可以存在多个作用域（如：循环私有作用域）"}),"\n"]})})]}),"\n",(0,r.jsxs)(s.h3,{id:"ast-",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#ast-",children:"#"}),"AST \uD83C\uDF1F"]}),"\n",(0,r.jsxs)(s.p,{children:["作用域（Scope）通过 ",(0,r.jsx)(s.code,{children:"AST"})," 存储变量信息。"]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive tip",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsx)(s.div,{className:"rspress-directive-content",children:(0,r.jsxs)(s.p,{children:["通过 ",(0,r.jsx)(s.code,{children:"scope.ast"})," 可以访问作用域内的 ",(0,r.jsx)(s.code,{children:"AST"})," 树，从而可以对变量信息进行 CRUD 操作。"]})})]}),"\n",(0,r.jsxs)(s.h4,{id:"astnode",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#astnode",children:"#"}),"ASTNode"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"ASTNode"})," 是变量引擎中用于",(0,r.jsx)(s.strong,{children:"存储变量信息"}),"的",(0,r.jsx)(s.strong,{children:"基本信息单元"}),"。它可以为各种",(0,r.jsx)(s.strong,{children:"变量信息建模"}),"。这些变量信息包括："]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"声明"}),"：如 ",(0,r.jsx)(s.code,{children:"VariableDeclaration"})," ，用于声明新变量。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"类型"}),"：如 ",(0,r.jsx)(s.code,{children:"StringType"}),"，用于表示 String 类型。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"表达式"}),"：如 ",(0,r.jsx)(s.code,{children:"KeyPathExpression"}),"，用于对变量的引用。"]}),"\n"]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive info",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"ASTNode 具有以下特点"}),(0,r.jsx)(s.div,{className:"rspress-directive-content",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"树状结构"}),": ",(0,r.jsx)(s.code,{children:"ASTNode"})," 可以嵌套形成树（",(0,r.jsx)(s.code,{children:"AST"}),"），表示复杂的变量结构。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"序列化"}),": ",(0,r.jsx)(s.code,{children:"ASTNode"})," 可以与 JSON 格式（",(0,r.jsx)(s.code,{children:"ASTNodeJSON"}),"）相互转换，以便存储或传输。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"可扩展"}),": 可以通过扩展 ",(0,r.jsx)(s.code,{children:"ASTNode"})," 基类来添加新功能。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"响应式"}),": ",(0,r.jsx)(s.code,{children:"ASTNode"})," 值的变化会触发事件，从而实现响应式编程模式。"]}),"\n"]})})]}),"\n",(0,r.jsxs)(s.h4,{id:"astnodejson",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#astnodejson",children:"#"}),"ASTNodeJSON"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"ASTNodeJSON"})," 是 ",(0,r.jsx)(s.code,{children:"ASTNode"})," 的",(0,r.jsx)(s.strong,{children:"纯 JSON 序列化"}),"表示。"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"ASTNodeJSON"})," 包含一个 ",(0,r.jsx)(s.code,{children:"kind"})," 字段，用于表示 ",(0,r.jsx)(s.code,{children:"ASTNode"})," 的类型："]}),"\n",(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,r.jsxs)(s.code,{className:"language-tsx",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * 相当于 JavaScript 代码："})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * `var var_index: string`"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"{"})}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  kind"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'VariableDeclaration'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  key"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'var_index'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  type"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" { kind"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'StringType'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" }"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"}"})})]})})}),"\n",(0,r.jsxs)(s.p,{children:["用户在使用变量引擎时，通过 ",(0,r.jsx)(s.code,{children:"ASTNodeJSON"})," 描述变量信息，然后通过变量引擎",(0,r.jsx)(s.strong,{children:"实例化"}),"为 ",(0,r.jsx)(s.code,{children:"ASTNode"}),"，并将其添加到作用域中。"]}),"\n",(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,r.jsxs)(s.code,{className:"language-tsx",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * 通过 scope.setVar 方法，将 ASTNodeJSON 实例化为 ASTNode，并添加到作用域中"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"const"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" variableDeclaration"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:" VariableDeclaration"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:" ="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" scope"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".setVar"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"({"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  kind"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'VariableDeclaration'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  key"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'var_index'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  type"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" { kind"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'StringType'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" }"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"});"})}),"\n",(0,r.jsx)(s.span,{className:"line"}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * ASTNodeJSON 实例化为 ASTNode 之后，可以进行响应式监听"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"variableDeclaration"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".onTypeChange"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"((newType) "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"=>"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" {"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"  console"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".log"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"("}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'变量类型变化了'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" newType);"})]}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"})"})}),"\n",(0,r.jsx)(s.span,{className:"line"})]})})}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive info",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"概念比对"}),(0,r.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"ASTNodeJSON"})," 和 ",(0,r.jsx)(s.code,{children:"ASTNode"})," 的关系，类似于 React 中 ",(0,r.jsx)(s.code,{children:"JSX"})," 和 ",(0,r.jsx)(s.code,{children:"VDOM"})," 的关系"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ASTNodeJSON"})," 通过变量引擎实例化为 ",(0,r.jsx)(s.code,{children:"ASTNode"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"JSX"})," 通过 React 引擎实例化为 ",(0,r.jsx)(s.code,{children:"VDOM"})]}),"\n"]})]})]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive warning",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"❓ 为什么不用 Json Schema"}),(0,r.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"https://json-schema.org/",rel:"noopener noreferrer",target:"_blank",children:(0,r.jsx)(s.code,{children:"Json Schema"})})," 是一种用于描述 JSON 数据结构的格式："]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"Json Schema"})," 只描述了变量的类型信息，而 ",(0,r.jsx)(s.code,{children:"ASTNodeJSON"})," 还可以包含变量的其他信息（如：变量的初始值）。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ASTNodeJSON"})," 可以通过变量引擎实例化为 ",(0,r.jsx)(s.code,{children:"ASTNode"}),"，从而实现响应式监听等能力。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"Json Schema"})," 擅长描述 Json 的类型，而 ",(0,r.jsx)(s.code,{children:"ASTNodeJSON"})," 可以通过自定义扩展定义行为更复杂的信息。"]}),"\n"]}),(0,r.jsxs)(s.p,{children:["在技术选型上，",(0,r.jsx)(s.code,{children:"变量引擎内核"}),"需要更强大的扩展与表达能力，因此需要用 ",(0,r.jsx)(s.code,{children:"ASTNodeJSON"})," 来描述更丰富更复杂的变量信息，如：通过定义变量的初始值，实现变量类型的动态推导 + 自动联动。"]}),(0,r.jsxs)(s.p,{children:["不过 ",(0,r.jsx)(s.code,{children:"Json Schema"})," 作为业界通用的 JSON 类型描述格式，在易用性、跨团队沟通以及生态（如 ajv、zod）上更有优势。因此我们在",(0,r.jsx)(s.a,{href:"/materials/introduction.html",children:(0,r.jsx)(s.strong,{children:"物料库"})}),"中大量使用了 Json Schema，来降低大家的上手成本。"]})]})]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive tip",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,r.jsxs)(s.p,{children:["变量引擎提供了 ",(0,r.jsx)(s.code,{children:"ASTFactory"}),"，可以",(0,r.jsx)(s.strong,{children:"类型安全"}),"地创建 ",(0,r.jsx)(s.code,{children:"ASTNodeJSON"}),":"]}),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,r.jsxs)(s.code,{className:"language-tsx",children:[(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"import"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" { ASTFactory } "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"from"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" '@flowgram/editor'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:";"})]}),"\n",(0,r.jsx)(s.span,{className:"line"}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * 类型安全地创建 VariableDeclaration ASTNodeJSON"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" *"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * 等价于："})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * {"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" *   kind: 'VariableDeclaration',"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" *   key: 'var_index',"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" *   type: { kind: 'StringType' },"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * }"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"ASTFactory"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".createVariableDeclaration"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"({"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  key"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'var_index'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  type"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" { kind"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'StringType'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" }"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"});"})})]})})})]})]}),"\n",(0,r.jsxs)(s.h3,{id:"声明",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#声明",children:"#"}),"声明"]}),"\n",(0,r.jsxs)(s.p,{children:["声明 = 标识符（Key） + 定义（Definition）。在设计态中，声明是一种存储标识符 + 变量信息的 ",(0,r.jsx)(s.code,{children:"ASTNode"}),"。"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"标识符（Key）：访问声明的索引。"}),"\n",(0,r.jsx)(s.li,{children:"定义（Definition）：声明定义的信息。如：变量的定义 = 类型 + 右值。"}),"\n"]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive info",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"举例：JavaScript 中的声明"}),(0,r.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"变量声明"})," = 标识符 + 变量定义（类型 + 初始值）"]}),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,r.jsxs)(s.code,{className:"language-javascript",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * 标识符：some_var"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * 变量定义：类型为 number，初始值为 10"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"const"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" some_var"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:" ="}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" 10"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:";"})]})]})})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"函数声明"})," = 标识符 + 函数定义（函数入参出参 + 函数体实现）"]}),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,r.jsxs)(s.code,{className:"language-javascript",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * 标识符：add"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * 函数定义：入参为两个 number 类型的变量 a, b，出参为 number 类型的变量"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:" add"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"(a"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" b"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:")"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" {"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"  return"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" a "}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"+"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" b;"})]}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"}"})})]})})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"结构体声明"})," = 标识符 + 结构体定义（字段 + 类型）"]}),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,r.jsxs)(s.code,{className:"language-javascript",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"/**"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * 标识符：Point"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" * 结构体定义：字段为 x, y，类型均为 number"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:" */"})}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"interface"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:" Point"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" {"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  x"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:";"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  y"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" number"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:";"})]}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"}"})})]})})})]})]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive tip",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"标识符的作用"}),(0,r.jsx)(s.div,{className:"rspress-directive-content",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"标识符"}),"是声明的",(0,r.jsx)(s.strong,{children:"索引"}),"，用于访问声明中的",(0,r.jsx)(s.code,{children:"定义"}),"。"]}),"\n",(0,r.jsxs)(s.li,{children:["举例：编程语言在编译时，通过",(0,r.jsx)(s.code,{children:"标识符"}),"找到变量的类型",(0,r.jsx)(s.code,{children:"定义"}),"，从而可以进行类型检查。"]}),"\n"]})})]}),"\n",(0,r.jsxs)(s.p,{children:["变量引擎目前只提供了",(0,r.jsx)(s.strong,{children:"变量字段声明"}),"（",(0,r.jsx)(s.code,{children:"BaseVariableField"}),"），并基于此扩展了",(0,r.jsx)(s.strong,{children:"变量声明"}),"（",(0,r.jsx)(s.code,{children:"VariableDeclaration"}),"）和",(0,r.jsx)(s.strong,{children:"属性声明"}),"（",(0,r.jsx)(s.code,{children:"Property"}),"）两种声明。"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["变量字段声明（",(0,r.jsx)(s.code,{children:"BaseVariableField"}),"）= 标识符 + 变量字段定义（类型 + 元信息 + 初始值）"]}),"\n",(0,r.jsxs)(s.li,{children:["变量声明（",(0,r.jsx)(s.code,{children:"VariableDeclaration"}),"）= ",(0,r.jsx)(s.strong,{children:"全局唯一"}),"标识符 + 变量定义（类型 + 元信息 + 初始值 + 作用域内排序）"]}),"\n",(0,r.jsxs)(s.li,{children:["属性声明（",(0,r.jsx)(s.code,{children:"Property"}),"）= ",(0,r.jsx)(s.strong,{children:"Object 内唯一"}),"标识符 + 属性定义（类型 + 元信息 + 初始值）"]}),"\n"]}),"\n",(0,r.jsxs)(s.h3,{id:"类型",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#类型",children:"#"}),"类型"]}),"\n",(0,r.jsxs)(s.p,{children:["类型用于",(0,r.jsx)(s.strong,{children:"约束变量值的范围"}),"。在设计态中，类型是一种 ",(0,r.jsx)(s.code,{children:"ASTNode"}),"。"]}),"\n",(0,r.jsxs)(s.p,{children:["变量引擎内置了 JSON 的",(0,r.jsx)(s.strong,{children:"基础类型"}),"："]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"StringType"}),"：字符串"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"IntegerType"}),"：整数"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"NumberType"}),"：浮点数"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"BooleanType"}),"：布尔值"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ObjectType"}),"：对象，可下钻 ",(0,r.jsx)(s.code,{children:"Property"})," 声明。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ArrayType"}),"：数组，可下钻其他类型。"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"同时新增了："}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"MapType"}),"：键值对，键和值都可以进行类型定义。"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"CustomType"}),"：由用户进行自定义扩展，如日期、时间、文件类型等。"]}),"\n"]}),"\n",(0,r.jsxs)(s.h3,{id:"表达式",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#表达式",children:"#"}),"表达式"]}),"\n",(0,r.jsxs)(s.p,{children:["表达式",(0,r.jsx)(s.strong,{children:"输入 0 个或者多个变量"}),"，并通过",(0,r.jsx)(s.strong,{children:"通过特定方式"}),"进行计算，返回一个新的",(0,r.jsx)(s.strong,{children:"变量"}),"。"]}),"\n",(0,r.jsx)(l.Z,{code:"graph LR\n\n输入变量_1 --输入--\x3e 表达式\n输入变量_2 --输入--\x3e 表达式\n\n表达式 --返回--\x3e 输出变量\n\nstyle 表达式 stroke:#333,stroke-width:3px;",config:{}}),"\n",(0,r.jsxs)(s.p,{children:["而在",(0,r.jsx)(s.strong,{children:"设计态"}),"中，表达式是一种 ",(0,r.jsx)(s.code,{children:"ASTNode"}),"，建模中我们只需关注："]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["表达式",(0,r.jsx)(s.strong,{children:"使用了哪些变量声明"})," ?"]}),"\n",(0,r.jsxs)(s.li,{children:["表达式的",(0,r.jsx)(s.strong,{children:"返回类型"}),"是怎么推导的 ?"]}),"\n"]}),"\n",(0,r.jsx)(l.Z,{code:"graph LR\n\n变量声明_1 --输入--\x3e 设计态中的表达式\n变量声明_2 --输入--\x3e 设计态中的表达式\n设计态中的表达式 --推导--\x3e 返回类型\n\nstyle 设计态中的表达式 stroke:#333,stroke-width:3px;\n",config:{}}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive info",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"举例：设计态中表达式的推导"}),(0,r.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,r.jsxs)(s.p,{children:["假设我们有一个用 JavaScript 代码描述的表达式 ",(0,r.jsx)(s.code,{children:"ref_var + 1"})]}),(0,r.jsxs)(s.p,{children:["表达式",(0,r.jsx)(s.strong,{children:"使用了哪些变量声明"})," ?"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ref_var"})," 标识符对应的变量声明"]}),"\n"]}),(0,r.jsxs)(s.p,{children:["表达式的",(0,r.jsx)(s.strong,{children:"返回类型"}),"是怎么推导的 ?"]}),(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ref_var"})," 的类型为 ",(0,r.jsx)(s.code,{children:"IntegerType"}),"，则 ",(0,r.jsx)(s.code,{children:"ref_var + 1"})," 的返回类型为 ",(0,r.jsx)(s.code,{children:"IntegerType"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ref_var"})," 的类型为 ",(0,r.jsx)(s.code,{children:"NumberType"}),"，则 ",(0,r.jsx)(s.code,{children:"ref_var + 1"})," 的返回类型为 ",(0,r.jsx)(s.code,{children:"NumberType"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ref_var"})," 的类型为 ",(0,r.jsx)(s.code,{children:"StringType"}),"，则 ",(0,r.jsx)(s.code,{children:"ref_var + 1"})," 的返回类型为 ",(0,r.jsx)(s.code,{children:"StringType"})]}),"\n"]})]})]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive info",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"举例：变量引擎如何实现类型推导 + 联动"}),(0,r.jsx)(s.div,{className:"rspress-directive-content",children:(0,r.jsxs)("div",{style:{},children:[(0,r.jsx)("div",{style:{width:500},children:(0,r.jsx)("img",{loading:"lazy",src:"/variable/variable-batch-auto-infer.gif",alt:"类型自动推导",style:{width:"100%"}})}),(0,r.jsxs)("div",{style:{minWidth:500},children:[(0,r.jsx)(s.p,{children:"图中展示了一个常见的例子：批处理节点引用前序节点的输出变量，对其进行遍历处理，得到一个 item 变量。其中 item 的变量类型会随着前序节点输出变量的类型而自动变化。"}),(0,r.jsx)(s.p,{children:"这个例子的 ASTNodeJSON 可表示为："}),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(s.pre,{className:"shiki css-variables has-highlighted",style:{backgroundColor:"var(--shiki-background)",color:"var(--shiki-foreground)"},tabIndex:"0",children:(0,r.jsxs)(s.code,{className:"language-tsx",children:[(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"ASTFactory"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".createVariableDeclaration"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"({"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  key"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'item'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  initializer"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" ASTFactory"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".createEnumerateExpression"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"({"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"    enumerateFor"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:" ASTFactory"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:".createKeyPathExpression"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"({"})]}),"\n",(0,r.jsxs)(s.span,{className:"line",children:[(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"      keyPath"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:" ["}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'start_0'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:" 'arr'"}),(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"]"})]}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"    })"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"  })"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-foreground)"},children:"})"})})]})})}),(0,r.jsx)(s.p,{children:"变量的推导链路如下："}),(0,r.jsx)(l.Z,{code:'graph LR\n\n  Array_String["Array&lt;String&gt;"]\n  Ref_Var["类型为 \\n Array&lt;String&gt; \\n 的变量"]\n\n  VariableDeclaration --初始值--\x3e EnumerateExpression\n  KeyPathExpression --引用--\x3e Ref_Var\n  KeyPathExpression --返回类型--\x3e Array_String\n  EnumerateExpression --遍历--\x3e KeyPathExpression\n  EnumerateExpression --返回类型--\x3e String\n  VariableDeclaration -.推导的类型.-> String\n  Array_String -.遍历提取子类型.-> String\n  Ref_Var -.类型.-> Array_String\n',config:{}})]})]})})]}),"\n",(0,r.jsxs)(s.h3,{id:"作用域链",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#作用域链",children:"#"}),"作用域链"]}),"\n",(0,r.jsxs)(s.p,{children:["作用域链（Scope Chain）定义了",(0,r.jsx)(s.strong,{children:"一个作用域可以引用哪些作用域的变量"}),"。它是一个抽象类，具体的业务场景可以实现自定义的作用域链。"]}),"\n",(0,r.jsxs)(s.p,{children:["变量引擎内置了",(0,r.jsx)(s.strong,{children:"自由布局作用域链"}),"和",(0,r.jsx)(s.strong,{children:"固定布局作用域链"}),"两种作用域链实现。"]}),"\n",(0,r.jsxs)(s.h4,{id:"依赖作用域",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#依赖作用域",children:"#"}),"依赖作用域"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"依赖作用域"})," = 作用域可以访问哪些作用域的输出变量"]}),"\n",(0,r.jsxs)(s.p,{children:["可以通过 ",(0,r.jsx)(s.code,{children:"scope.depScopes"})," 访问作用域的",(0,r.jsx)(s.code,{children:"依赖作用域"}),"。"]}),"\n",(0,r.jsxs)(s.h4,{id:"覆盖作用域",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#覆盖作用域",children:"#"}),"覆盖作用域"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"覆盖作用域"})," = 作用域的输出变量可以被哪些作用域访问"]}),"\n",(0,r.jsxs)(s.p,{children:["可以通过 ",(0,r.jsx)(s.code,{children:"scope.coverScopes"})," 访问作用域的",(0,r.jsx)(s.code,{children:"覆盖作用域"}),"。"]}),"\n",(0,r.jsxs)(s.h2,{id:"画布中的变量",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#画布中的变量",children:"#"}),"画布中的变量"]}),"\n",(0,r.jsx)(s.p,{children:"FlowGram 在画布中定义了以下几种特殊的作用域："}),"\n",(0,r.jsxs)(s.h3,{id:"节点作用域",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#节点作用域",children:"#"}),"节点作用域"]}),"\n",(0,r.jsxs)(s.p,{children:["又称",(0,r.jsx)(s.code,{children:"节点公开作用域"}),"，作用域可以访问",(0,r.jsx)(s.strong,{children:"上游节点"}),"的",(0,r.jsx)(s.code,{children:"节点作用域"}),"的变量，同时其输出变量声明也可以被",(0,r.jsx)(s.strong,{children:"下游节点"}),"的",(0,r.jsx)(s.code,{children:"节点作用域"}),"访问。"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"节点作用域"})," 可以通过 ",(0,r.jsx)(s.code,{children:"node.scope"})," 来设置和获取，它的作用域链关系如下图所示："]}),"\n",(0,r.jsx)(l.Z,{code:'graph BT\n\n  subgraph 当前节点\n    子节点_1.scope\n    子节点_2.scope\n    当前节点.scope\n  end\n\n  子节点_1.scope -.依赖.-> 上游节点.scope\n  子节点_2.scope -.依赖.-> 上游节点.scope\n  当前节点.scope -.依赖.-> 上游节点.scope\n  下游节点.scope -.依赖.-> 上游节点.scope\n  下游节点.scope -.依赖.-> 当前节点.scope\n\n  下游节点.scope -.-|"<font color=red>❌ 不可访问</font>"| 子节点_1.scope\n  下游节点.scope -.-|"<font color=red>❌ 不可访问</font>"| 子节点_2.scope\n\n  linkStyle 5 stroke:red,stroke-width:2px\n  linkStyle 6 stroke:red,stroke-width:2px\n\n\n  style 当前节点.scope fill:#f9f,stroke:#333,stroke-width:3px',config:{}}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive warning",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"WARNING"}),(0,r.jsx)(s.div,{className:"rspress-directive-content",children:(0,r.jsxs)(s.p,{children:["在默认的作用域逻辑中，子节点的 ",(0,r.jsx)(s.code,{children:"节点作用域"})," 输出变量不可被",(0,r.jsx)(s.strong,{children:"父节点的下游节点"})," 访问。"]})})]}),"\n",(0,r.jsxs)(s.h3,{id:"节点私有作用域",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#节点私有作用域",children:"#"}),"节点私有作用域"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"节点私有作用域"}),"的输出变量只能在",(0,r.jsx)(s.strong,{children:"当前节点"}),"的",(0,r.jsx)(s.code,{children:"节点作用域"}),"及其",(0,r.jsx)(s.strong,{children:"子节点"}),"的",(0,r.jsx)(s.code,{children:"节点作用域"}),"中访问。类似编程语言中",(0,r.jsx)(s.code,{children:"私有变量"}),"的概念。"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"节点私有作用域"})," 可以通过 ",(0,r.jsx)(s.code,{children:"node.privateScope"})," 来设置和获取，它的作用域链关系如下图所示："]}),"\n",(0,r.jsx)(l.Z,{code:"graph BT\n  subgraph 当前节点\n    子节点_1.scope -.依赖.-> 当前节点.privateScope\n    当前节点.scope -.依赖.-> 当前节点.privateScope\n    子节点_2.scope -.依赖.-> 当前节点.privateScope\n  end\n\n  当前节点 -.都依赖.-> 上游节点.scope\n  下游节点.scope -.依赖.-> 当前节点.scope\n  下游节点.scope -.依赖.-> 上游节点.scope\n\n\n  style 当前节点.privateScope fill:#f9f,stroke:#333,stroke-width:3px\n  style 当前节点.scope stroke:#333,stroke-width:3px",config:{}}),"\n",(0,r.jsxs)(s.h3,{id:"全局作用域",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#全局作用域",children:"#"}),"全局作用域"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"全局作用域"}),"的变量能被",(0,r.jsx)(s.strong,{children:"所有节点作用域和节点私有作用域"}),"访问，但是不能访问其他作用域的变量。"]}),"\n",(0,r.jsxs)(s.p,{children:["全局作用域的设置方式详见",(0,r.jsx)(s.a,{href:"/guide/variable/variable-output.html#%E8%BE%93%E5%87%BA%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F",children:"输出全局变量"}),"，他的作用域链关系如下图所示："]}),"\n",(0,r.jsx)(l.Z,{code:"graph RL\n\n subgraph 当前节点\n    子节点_1.scope\n    子节点_2.scope\n    当前节点.scope\n    当前节点.privateScope\n  end\n\n  当前节点.scope -.依赖.-> 全局作用域\n  上游节点.scope -.依赖.-> 全局作用域\n  下游节点.scope -.依赖.-> 全局作用域\n  当前节点.privateScope -.依赖.-> 全局作用域\n  子节点_1.scope -.依赖.-> 全局作用域\n  子节点_2.scope -.依赖.-> 全局作用域\n\n  style 当前节点.scope stroke:#333,stroke-width:3px\n  style 全局作用域 fill:#f9f,stroke:#333,stroke-width:3px\n",config:{}}),"\n",(0,r.jsxs)(s.h2,{id:"整体架构",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#整体架构",children:"#"}),"整体架构"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"/variable/concept/arch-zh.png",alt:"架构图"})}),"\n",(0,r.jsx)(s.p,{children:"变量引擎设计上遵循 DIP（依赖反转）原则，按照 代码稳定性、抽象层次 以及和 业务的远近 分为三层："}),"\n",(0,r.jsxs)(s.h3,{id:"变量抽象层",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#变量抽象层",children:"#"}),"变量抽象层"]}),"\n",(0,r.jsxs)(s.p,{children:["变量架构中抽象层次最高，代码也最为稳定的部分。抽象层对 ",(0,r.jsx)(s.code,{children:"ASTNode"}),"、",(0,r.jsx)(s.code,{children:"Scope"}),"、",(0,r.jsx)(s.code,{children:"ScopeChain"})," 等核心概念进行了抽象类定义。"]}),"\n",(0,r.jsxs)(s.h3,{id:"变量实现层",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#变量实现层",children:"#"}),"变量实现层"]}),"\n",(0,r.jsxs)(s.p,{children:["变量架构中变动较大，不同业务之间可能存在调整的部分。引擎内置了一批较为稳定的 ",(0,r.jsx)(s.code,{children:"ASTNode"})," 节点和 ",(0,r.jsx)(s.code,{children:"ScopeChain"})," 的实现。当用户存在复杂的变量需求时，可以通过依赖注入注册新的 ",(0,r.jsx)(s.code,{children:"ASTNode"})," 或者重载已有 ",(0,r.jsx)(s.code,{children:"ASTNode"})," 节点实现定制化。"]}),"\n",(0,r.jsxs)(s.h3,{id:"变量物料层",children:[(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#变量物料层",children:"#"}),"变量物料层"]}),"\n",(0,r.jsx)(s.p,{children:"基于外观模式（Facade）的思路提高变量易用性，将复杂的变量逻辑封装为简单开箱即用的变量物料。"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["变量物料的使用详见：",(0,r.jsx)(s.a,{href:"/materials/introduction.html",children:"物料"})]}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fguide%2Fvariable%2Fconcept.mdx"]={toc:[{id:"核心概念",text:"核心概念",depth:2},{id:"变量",text:"变量",depth:3},{id:"作用域-",text:"作用域 \uD83C\uDF1F",depth:3},{id:"ast-",text:"AST \uD83C\uDF1F",depth:3},{id:"astnode",text:"ASTNode",depth:4},{id:"astnodejson",text:"ASTNodeJSON",depth:4},{id:"声明",text:"声明",depth:3},{id:"类型",text:"类型",depth:3},{id:"表达式",text:"表达式",depth:3},{id:"作用域链",text:"作用域链",depth:3},{id:"依赖作用域",text:"依赖作用域",depth:4},{id:"覆盖作用域",text:"覆盖作用域",depth:4},{id:"画布中的变量",text:"画布中的变量",depth:2},{id:"节点作用域",text:"节点作用域",depth:3},{id:"节点私有作用域",text:"节点私有作用域",depth:3},{id:"全局作用域",text:"全局作用域",depth:3},{id:"整体架构",text:"整体架构",depth:2},{id:"变量抽象层",text:"变量抽象层",depth:3},{id:"变量实现层",text:"变量实现层",depth:3},{id:"变量物料层",text:"变量物料层",depth:3}],title:"概念",headingTitle:"概念",frontmatter:{description:"介绍变量引擎的核心概念"}}}}]);