"use strict";(self.webpackChunk_flowgram_ai_docs=self.webpackChunk_flowgram_ai_docs||[]).push([["830504"],{353524:function(n){n.exports="import '@flowgram.ai/fixed-layout-editor/index.css';\nimport { defaultFixedSemiMaterials } from '@flowgram.ai/fixed-semi-materials';\nimport { FixedLayoutEditorProvider, EditorRenderer } from '@flowgram.ai/fixed-layout-editor';\n\nconst FlowGramApp = () => (\n  <FixedLayoutEditorProvider\n    materials={{\n      components: defaultFixedSemiMaterials,\n    }}\n  >\n    <EditorRenderer />\n  </FixedLayoutEditorProvider>\n);\n\nexport default FlowGramApp;\n"},783776:function(n){n.exports="import '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { defaultFixedSemiMaterials } from '@flowgram.ai/fixed-semi-materials';\nimport {\n  FixedLayoutEditorProvider,\n  EditorRenderer,\n  FlowNodeEntity,\n  useNodeRender,\n} from '@flowgram.ai/fixed-layout-editor';\n\nexport const NodeRender = ({ node }: { node: FlowNodeEntity }) => {\n  const {\n    onMouseEnter,\n    onMouseLeave,\n    startDrag,\n    form,\n    dragging,\n    isBlockOrderIcon,\n    isBlockIcon,\n    activated,\n  } = useNodeRender();\n\n  return (\n    <div\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onMouseDown={(e) => {\n        startDrag(e);\n        e.stopPropagation();\n      }}\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: activated ? '#82a7fc' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n        opacity: dragging ? 0.3 : 1,\n        ...(isBlockOrderIcon || isBlockIcon ? { width: 260 } : {}),\n      }}\n    >\n      {form?.render()}\n    </div>\n  );\n};\n\nconst FlowGramApp = () => (\n  <FixedLayoutEditorProvider\n    nodeRegistries={[\n      {\n        type: 'custom',\n      },\n    ]}\n    initialData={{\n      nodes: [\n        {\n          id: 'custom_0',\n          type: 'custom',\n        },\n      ],\n    }}\n    materials={{\n      renderDefaultNode: NodeRender,\n      components: defaultFixedSemiMaterials,\n    }}\n  >\n    <EditorRenderer />\n  </FixedLayoutEditorProvider>\n);\n\nexport default FlowGramApp;\n"},405337:function(n){n.exports="import '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FC } from 'react';\n\nimport { defaultFixedSemiMaterials } from '@flowgram.ai/fixed-semi-materials';\nimport {\n  FixedLayoutEditorProvider,\n  EditorRenderer,\n  FlowNodeEntity,\n  useNodeRender,\n  FlowNodeJSON,\n  FlowOperationService,\n  usePlayground,\n  useService,\n  FlowRendererKey,\n  useClientContext,\n} from '@flowgram.ai/fixed-layout-editor';\n\nexport const NodeRender = ({ node }: { node: FlowNodeEntity }) => {\n  const {\n    onMouseEnter,\n    onMouseLeave,\n    startDrag,\n    form,\n    dragging,\n    isBlockOrderIcon,\n    isBlockIcon,\n    activated,\n  } = useNodeRender();\n  const ctx = useClientContext();\n\n  return (\n    <div\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onMouseDown={(e) => {\n        startDrag(e);\n        e.stopPropagation();\n      }}\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: activated ? '#82a7fc' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n        opacity: dragging ? 0.3 : 1,\n        ...(isBlockOrderIcon || isBlockIcon ? { width: 260 } : {}),\n      }}\n    >\n      {form?.render()}\n      {/* 删除按钮 */}\n      <button\n        onClick={(e) => {\n          e.stopPropagation();\n          ctx.operation.deleteNode(node);\n        }}\n        style={{\n          position: 'absolute',\n          top: 4,\n          right: 4,\n          width: 20,\n          height: 20,\n          border: 'none',\n          borderRadius: '50%',\n          background: '#fff',\n          color: '#666',\n          fontSize: 12,\n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          boxShadow: '0 1px 3px rgba(0,0,0,0.12)',\n          transition: 'all 0.2s',\n        }}\n      >\n        \xd7\n      </button>\n    </div>\n  );\n};\n\nconst useAddNode = () => {\n  const playground = usePlayground();\n  const flowOperationService = useService(FlowOperationService) as FlowOperationService;\n\n  const handleAdd = (addProps: FlowNodeJSON, dropNode: FlowNodeEntity) => {\n    const blocks = addProps.blocks ? addProps.blocks : undefined;\n    const entity = flowOperationService.addFromNode(dropNode, {\n      ...addProps,\n      blocks,\n    });\n    setTimeout(() => {\n      playground.scrollToView({\n        bounds: entity.bounds,\n        scrollToCenter: true,\n      });\n    }, 10);\n    return entity;\n  };\n\n  const handleAddBranch = (addProps: FlowNodeJSON, dropNode: FlowNodeEntity) => {\n    const index = dropNode.index + 1;\n    const entity = flowOperationService.addBlock(dropNode.originParent!, addProps, {\n      index,\n    });\n    return entity;\n  };\n\n  return {\n    handleAdd,\n    handleAddBranch,\n  };\n};\n\nconst Adder: FC<{\n  from: FlowNodeEntity;\n  to?: FlowNodeEntity;\n  hoverActivated: boolean;\n}> = ({ from, hoverActivated }) => {\n  const playground = usePlayground();\n\n  const { handleAdd } = useAddNode();\n\n  if (playground.config.readonlyOrDisabled) return null;\n\n  return (\n    <div\n      style={{\n        width: hoverActivated ? 15 : 6,\n        height: hoverActivated ? 15 : 6,\n        backgroundColor: hoverActivated ? '#fff' : 'rgb(143, 149, 158)',\n        color: '#fff',\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n      }}\n      onClick={() => {\n        handleAdd({ type: 'custom', id: `custom_${Date.now()}` }, from);\n      }}\n    >\n      {hoverActivated ? (\n        <span\n          style={{\n            color: '#3370ff',\n            fontSize: 12,\n          }}\n        >\n          +\n        </span>\n      ) : null}\n    </div>\n  );\n};\n\nconst FlowGramApp = () => (\n  <FixedLayoutEditorProvider\n    nodeRegistries={[\n      {\n        type: 'custom',\n      },\n    ]}\n    initialData={{\n      nodes: [\n        {\n          id: 'start_0',\n          type: 'start',\n        },\n        {\n          id: 'custom_1',\n          type: 'custom',\n        },\n        {\n          id: 'end_2',\n          type: 'end',\n        },\n      ],\n    }}\n    onAllLayersRendered={(ctx) => {\n      setTimeout(() => {\n        ctx.playground.config.fitView(ctx.document.root.bounds.pad(30));\n      }, 10);\n    }}\n    materials={{\n      renderDefaultNode: NodeRender,\n      components: {\n        ...defaultFixedSemiMaterials,\n        [FlowRendererKey.ADDER]: Adder,\n      },\n    }}\n  >\n    <EditorRenderer />\n  </FixedLayoutEditorProvider>\n);\n\nexport default FlowGramApp;\n"},781281:function(n){n.exports="import '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FC } from 'react';\n\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\nimport { defaultFixedSemiMaterials } from '@flowgram.ai/fixed-semi-materials';\nimport {\n  FixedLayoutEditorProvider,\n  EditorRenderer,\n  FlowNodeEntity,\n  useNodeRender,\n  FlowNodeJSON,\n  FlowOperationService,\n  usePlayground,\n  useService,\n  FlowRendererKey,\n  useClientContext,\n} from '@flowgram.ai/fixed-layout-editor';\n\nexport const NodeRender = ({ node }: { node: FlowNodeEntity }) => {\n  const {\n    onMouseEnter,\n    onMouseLeave,\n    startDrag,\n    form,\n    dragging,\n    isBlockOrderIcon,\n    isBlockIcon,\n    activated,\n  } = useNodeRender();\n  const ctx = useClientContext();\n\n  return (\n    <div\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onMouseDown={(e) => {\n        startDrag(e);\n        e.stopPropagation();\n      }}\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: activated ? '#82a7fc' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n        opacity: dragging ? 0.3 : 1,\n        ...(isBlockOrderIcon || isBlockIcon ? { width: 260 } : {}),\n      }}\n    >\n      {form?.render()}\n      {/* 删除按钮 */}\n      <button\n        onClick={(e) => {\n          e.stopPropagation();\n          ctx.operation.deleteNode(node);\n        }}\n        style={{\n          position: 'absolute',\n          top: 4,\n          right: 4,\n          width: 20,\n          height: 20,\n          border: 'none',\n          borderRadius: '50%',\n          background: '#fff',\n          color: '#666',\n          fontSize: 12,\n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          boxShadow: '0 1px 3px rgba(0,0,0,0.12)',\n          transition: 'all 0.2s',\n        }}\n      >\n        \xd7\n      </button>\n    </div>\n  );\n};\n\nconst useAddNode = () => {\n  const playground = usePlayground();\n  const flowOperationService = useService(FlowOperationService) as FlowOperationService;\n\n  const handleAdd = (addProps: FlowNodeJSON, dropNode: FlowNodeEntity) => {\n    const blocks = addProps.blocks ? addProps.blocks : undefined;\n    const entity = flowOperationService.addFromNode(dropNode, {\n      ...addProps,\n      blocks,\n    });\n    setTimeout(() => {\n      playground.scrollToView({\n        bounds: entity.bounds,\n        scrollToCenter: true,\n      });\n    }, 10);\n    return entity;\n  };\n\n  const handleAddBranch = (addProps: FlowNodeJSON, dropNode: FlowNodeEntity) => {\n    const index = dropNode.index + 1;\n    const entity = flowOperationService.addBlock(dropNode.originParent!, addProps, {\n      index,\n    });\n    return entity;\n  };\n\n  return {\n    handleAdd,\n    handleAddBranch,\n  };\n};\n\nconst Adder: FC<{\n  from: FlowNodeEntity;\n  to?: FlowNodeEntity;\n  hoverActivated: boolean;\n}> = ({ from, hoverActivated }) => {\n  const playground = usePlayground();\n\n  const { handleAdd } = useAddNode();\n\n  if (playground.config.readonlyOrDisabled) return null;\n\n  return (\n    <div\n      style={{\n        width: hoverActivated ? 15 : 6,\n        height: hoverActivated ? 15 : 6,\n        backgroundColor: hoverActivated ? '#fff' : 'rgb(143, 149, 158)',\n        color: '#fff',\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n      }}\n      onClick={() => {\n        handleAdd({ type: 'custom', id: `custom_${Date.now()}` }, from);\n      }}\n    >\n      {hoverActivated ? (\n        <span\n          style={{\n            color: '#3370ff',\n            fontSize: 12,\n          }}\n        >\n          +\n        </span>\n      ) : null}\n    </div>\n  );\n};\n\nconst FlowGramApp = () => (\n  <FixedLayoutEditorProvider\n    plugins={() => [\n      createMinimapPlugin({\n        enableDisplayAllNodes: true,\n      }),\n    ]}\n    nodeRegistries={[\n      {\n        type: 'custom',\n      },\n    ]}\n    initialData={{\n      nodes: [\n        {\n          id: 'start_0',\n          type: 'start',\n        },\n        {\n          id: 'custom_1',\n          type: 'custom',\n        },\n        {\n          id: 'end_2',\n          type: 'end',\n        },\n      ],\n    }}\n    onAllLayersRendered={(ctx) => {\n      setTimeout(() => {\n        ctx.playground.config.fitView(ctx.document.root.bounds.pad(30));\n      }, 10);\n    }}\n    materials={{\n      renderDefaultNode: NodeRender,\n      components: {\n        ...defaultFixedSemiMaterials,\n        [FlowRendererKey.ADDER]: Adder,\n      },\n    }}\n  >\n    <EditorRenderer />\n  </FixedLayoutEditorProvider>\n);\n\nexport default FlowGramApp;\n"},422914:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FC } from 'react';\n\nimport {\n  FlowNodeEntity,\n  FlowNodeJSON,\n  FlowOperationService,\n  usePlayground,\n  useService,\n} from '@flowgram.ai/fixed-layout-editor';\n\nconst useAddNode = () => {\n  const playground = usePlayground();\n  const flowOperationService = useService(FlowOperationService) as FlowOperationService;\n\n  const handleAdd = (addProps: FlowNodeJSON, dropNode: FlowNodeEntity) => {\n    const blocks = addProps.blocks ? addProps.blocks : undefined;\n    const entity = flowOperationService.addFromNode(dropNode, {\n      ...addProps,\n      blocks,\n    });\n    setTimeout(() => {\n      playground.scrollToView({\n        bounds: entity.bounds,\n        scrollToCenter: true,\n      });\n    }, 10);\n    return entity;\n  };\n\n  const handleAddBranch = (addProps: FlowNodeJSON, dropNode: FlowNodeEntity) => {\n    const index = dropNode.index + 1;\n    const entity = flowOperationService.addBlock(dropNode.originParent!, addProps, {\n      index,\n    });\n    return entity;\n  };\n\n  return {\n    handleAdd,\n    handleAddBranch,\n  };\n};\n\nexport const Adder: FC<{\n  from: FlowNodeEntity;\n  to?: FlowNodeEntity;\n  hoverActivated: boolean;\n}> = ({ from, hoverActivated }) => {\n  const playground = usePlayground();\n\n  const { handleAdd } = useAddNode();\n\n  if (playground.config.readonlyOrDisabled) return null;\n\n  return (\n    <div\n      style={{\n        width: hoverActivated ? 15 : 6,\n        height: hoverActivated ? 15 : 6,\n        backgroundColor: hoverActivated ? '#fff' : 'rgb(143, 149, 158)',\n        color: '#fff',\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n      }}\n      onClick={() => {\n        handleAdd({ type: 'custom', id: `custom_${Date.now()}` }, from);\n      }}\n    >\n      {hoverActivated ? (\n        <span\n          style={{\n            color: '#3370ff',\n            fontSize: 12,\n          }}\n        >\n          +\n        </span>\n      ) : null}\n    </div>\n  );\n};\n"},368932:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FixedLayoutEditorProvider, EditorRenderer } from '@flowgram.ai/fixed-layout-editor';\n\nimport { useEditorProps } from './use-editor-props';\n\nconst FlowGramApp = () => {\n  const editorProps = useEditorProps();\n  return (\n    <FixedLayoutEditorProvider {...editorProps}>\n      <EditorRenderer />\n    </FixedLayoutEditorProvider>\n  );\n};\n\nexport default FlowGramApp;\n"},486542:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport type { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\nexport const initialData: FlowDocumentJSON = {\n  nodes: [\n    {\n      id: 'start_0',\n      type: 'start',\n    },\n    {\n      id: 'custom_1',\n      type: 'custom',\n    },\n    {\n      id: 'end_2',\n      type: 'end',\n    },\n  ],\n};\n"},997011:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport type { FlowNodeMeta, FlowNodeRegistry } from '@flowgram.ai/fixed-layout-editor';\n\nexport const nodeRegistries: FlowNodeRegistry<FlowNodeMeta>[] = [\n  {\n    type: 'custom',\n  },\n];\n"},289629:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FlowNodeEntity, useNodeRender, useClientContext } from '@flowgram.ai/fixed-layout-editor';\n\nexport const NodeRender = ({ node }: { node: FlowNodeEntity }) => {\n  const {\n    onMouseEnter,\n    onMouseLeave,\n    startDrag,\n    form,\n    dragging,\n    isBlockOrderIcon,\n    isBlockIcon,\n    activated,\n  } = useNodeRender();\n  const ctx = useClientContext();\n\n  return (\n    <div\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onMouseDown={(e) => {\n        startDrag(e);\n        e.stopPropagation();\n      }}\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: activated ? '#82a7fc' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n        opacity: dragging ? 0.3 : 1,\n        ...(isBlockOrderIcon || isBlockIcon ? { width: 260 } : {}),\n      }}\n    >\n      {form?.render()}\n      {/* 删除按钮 */}\n      <button\n        onClick={(e) => {\n          e.stopPropagation();\n          ctx.operation.deleteNode(node);\n        }}\n        style={{\n          position: 'absolute',\n          top: 4,\n          right: 4,\n          width: 20,\n          height: 20,\n          border: 'none',\n          borderRadius: '50%',\n          background: '#fff',\n          color: '#666',\n          fontSize: 12,\n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          boxShadow: '0 1px 3px rgba(0,0,0,0.12)',\n          transition: 'all 0.2s',\n        }}\n      >\n        \xd7\n      </button>\n    </div>\n  );\n};\n"},789514:function(n){n.exports="import '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { useMemo } from 'react';\n\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\nimport { defaultFixedSemiMaterials } from '@flowgram.ai/fixed-semi-materials';\nimport { FlowRendererKey, FixedLayoutProps } from '@flowgram.ai/fixed-layout-editor';\n\nimport { NodeRender } from './node-render';\nimport { nodeRegistries } from './node-registries';\nimport { initialData } from './initial-data';\nimport { Adder } from './adder';\n\nexport function useEditorProps(): FixedLayoutProps {\n  return useMemo<FixedLayoutProps>(\n    () => ({\n      plugins: () => [\n        createMinimapPlugin({\n          enableDisplayAllNodes: true,\n        }),\n      ],\n      nodeRegistries,\n      initialData,\n      onAllLayersRendered: (ctx) => {\n        setTimeout(() => {\n          ctx.playground.config.fitView(ctx.document.root.bounds.pad(30));\n        }, 10);\n      },\n      materials: {\n        renderDefaultNode: NodeRender,\n        components: {\n          ...defaultFixedSemiMaterials,\n          [FlowRendererKey.ADDER]: Adder,\n        },\n      },\n    }),\n    []\n  );\n}\n"},606182:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FC } from 'react';\n\nimport {\n  FlowNodeEntity,\n  FlowNodeJSON,\n  FlowOperationService,\n  usePlayground,\n  useService,\n} from '@flowgram.ai/fixed-layout-editor';\n\nconst useAddNode = () => {\n  const playground = usePlayground();\n  const flowOperationService = useService(FlowOperationService) as FlowOperationService;\n\n  const handleAdd = (addProps: FlowNodeJSON, dropNode: FlowNodeEntity) => {\n    const blocks = addProps.blocks ? addProps.blocks : undefined;\n    const entity = flowOperationService.addFromNode(dropNode, {\n      ...addProps,\n      blocks,\n    });\n    setTimeout(() => {\n      playground.scrollToView({\n        bounds: entity.bounds,\n        scrollToCenter: true,\n      });\n    }, 10);\n    return entity;\n  };\n\n  const handleAddBranch = (addProps: FlowNodeJSON, dropNode: FlowNodeEntity) => {\n    const index = dropNode.index + 1;\n    const entity = flowOperationService.addBlock(dropNode.originParent!, addProps, {\n      index,\n    });\n    return entity;\n  };\n\n  return {\n    handleAdd,\n    handleAddBranch,\n  };\n};\n\nexport const Adder: FC<{\n  from: FlowNodeEntity;\n  to?: FlowNodeEntity;\n  hoverActivated: boolean;\n}> = ({ from, hoverActivated }) => {\n  const playground = usePlayground();\n\n  const { handleAdd } = useAddNode();\n\n  if (playground.config.readonlyOrDisabled) return null;\n\n  return (\n    <div\n      style={{\n        width: hoverActivated ? 15 : 6,\n        height: hoverActivated ? 15 : 6,\n        backgroundColor: hoverActivated ? '#fff' : 'rgb(143, 149, 158)',\n        color: '#fff',\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n      }}\n      onClick={() => {\n        handleAdd(\n          {\n            type: 'custom',\n            id: `custom_${Date.now()}`,\n            data: {\n              title: 'New Custom Node',\n              content: 'Custom Node Content',\n            },\n          },\n          from\n        );\n      }}\n    >\n      {hoverActivated ? (\n        <span\n          style={{\n            color: '#3370ff',\n            fontSize: 12,\n          }}\n        >\n          +\n        </span>\n      ) : null}\n    </div>\n  );\n};\n"},741973:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FixedLayoutEditorProvider, EditorRenderer } from '@flowgram.ai/fixed-layout-editor';\n\nimport { useEditorProps } from './use-editor-props';\n\nconst FlowGramApp = () => {\n  const editorProps = useEditorProps();\n  return (\n    <FixedLayoutEditorProvider {...editorProps}>\n      <EditorRenderer />\n    </FixedLayoutEditorProvider>\n  );\n};\n\nexport default FlowGramApp;\n"},350996:function(n){n.exports="import type { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\nexport const initialData: FlowDocumentJSON = {\n  nodes: [\n    // 开始节点\n    {\n      id: 'start_0',\n      type: 'start',\n      data: {\n        title: 'Start',\n        content: 'start content',\n      },\n      blocks: [],\n    },\n    // 分支节点\n    {\n      id: 'condition_0',\n      type: 'condition',\n      data: {\n        title: 'Condition',\n        content: 'condition content',\n      },\n      blocks: [\n        {\n          id: 'branch_0',\n          type: 'block',\n          data: {\n            title: 'Branch 0',\n            content: 'branch 1 content',\n          },\n          blocks: [\n            {\n              id: 'custom_0',\n              type: 'custom',\n              data: {\n                title: 'Custom',\n                content: 'custom content',\n              },\n            },\n          ],\n        },\n        {\n          id: 'branch_1',\n          type: 'block',\n          data: {\n            title: 'Branch 1',\n            content: 'branch 1 content',\n          },\n          blocks: [\n            {\n              id: 'break_0',\n              type: 'break',\n              data: {\n                title: 'Break',\n                content: 'Break content',\n              },\n            },\n          ],\n        },\n        {\n          id: 'branch_2',\n          type: 'block',\n          data: {\n            title: 'Branch 2',\n            content: 'branch 2 content',\n          },\n          blocks: [],\n        },\n      ],\n    },\n    // 结束节点\n    {\n      id: 'end_0',\n      type: 'end',\n      data: {\n        title: 'End',\n        content: 'end content',\n      },\n    },\n  ],\n};\n"},438316:function(n){n.exports="/**\n * Copyright (c) 202 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport type { FlowNodeMeta, FlowNodeRegistry } from '@flowgram.ai/fixed-layout-editor';\n\nconst randomID = () => Math.random().toString(36).slice(2, 7);\n\nexport const nodeRegistries: FlowNodeRegistry<FlowNodeMeta>[] = [\n  {\n    /**\n     * 自定义节点类型\n     */\n    type: 'condition',\n    /**\n     * 自定义节点扩展:\n     *  - loop: 扩展为循环节点\n     *  - start: 扩展为开始节点\n     *  - dynamicSplit: 扩展为分支节点\n     *  - end: 扩展为结束节点\n     *  - tryCatch: 扩展为 tryCatch 节点\n     *  - break: 分支断开\n     *  - default: 扩展为普通节点 (默认)\n     */\n    extend: 'dynamicSplit',\n    /**\n     * 节点配置信息\n     */\n    meta: {\n      // isStart: false, // 是否为开始节点\n      // isNodeEnd: false, // 是否为结束节点，结束节点后边无法再添加节点\n      // draggable: false, // 是否可拖拽，如开始节点和结束节点无法拖拽\n      // selectable: false, // 触发器等开始节点不能被框选\n      // deleteDisable: true, // 禁止删除\n      // copyDisable: true, // 禁止copy\n      // addDisable: true, // 禁止添加\n    },\n    onAdd() {\n      return {\n        id: `condition_${randomID()}`,\n        type: 'condition',\n        data: {\n          title: 'Condition',\n        },\n        blocks: [\n          {\n            id: randomID(),\n            type: 'block',\n            data: {\n              title: 'If_0',\n            },\n          },\n          {\n            id: randomID(),\n            type: 'block',\n            data: {\n              title: 'If_1',\n            },\n          },\n        ],\n      };\n    },\n  },\n  {\n    type: 'custom',\n    meta: {},\n    onAdd() {\n      return {\n        id: `custom_${randomID()}`,\n        type: 'custom',\n        data: {\n          title: 'Custom',\n          content: 'this is custom content',\n        },\n      };\n    },\n  },\n];\n"},775601:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FlowNodeEntity, useNodeRender, useClientContext } from '@flowgram.ai/fixed-layout-editor';\n\nexport const NodeRender = ({ node }: { node: FlowNodeEntity }) => {\n  const {\n    onMouseEnter,\n    onMouseLeave,\n    startDrag,\n    form,\n    dragging,\n    isBlockOrderIcon,\n    isBlockIcon,\n    activated,\n  } = useNodeRender();\n  const ctx = useClientContext();\n\n  return (\n    <div\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onMouseDown={(e) => {\n        startDrag(e);\n        e.stopPropagation();\n      }}\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: activated ? '#82a7fc' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n        opacity: dragging ? 0.3 : 1,\n        ...(isBlockOrderIcon || isBlockIcon ? { width: 260 } : {}),\n      }}\n    >\n      {form?.render()}\n      {/* 删除按钮 */}\n      <button\n        onClick={(e) => {\n          e.stopPropagation();\n          ctx.operation.deleteNode(node);\n        }}\n        style={{\n          position: 'absolute',\n          top: 4,\n          right: 4,\n          width: 20,\n          height: 20,\n          border: 'none',\n          borderRadius: '50%',\n          background: '#fff',\n          color: '#666',\n          fontSize: 12,\n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          boxShadow: '0 1px 3px rgba(0,0,0,0.12)',\n          transition: 'all 0.2s',\n        }}\n      >\n        \xd7\n      </button>\n    </div>\n  );\n};\n"},31197:function(n){n.exports="import '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { useMemo } from 'react';\n\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\nimport { defaultFixedSemiMaterials } from '@flowgram.ai/fixed-semi-materials';\nimport { FlowRendererKey, FixedLayoutProps, Field } from '@flowgram.ai/fixed-layout-editor';\n\nimport { NodeRender } from './node-render';\nimport { nodeRegistries } from './node-registries';\nimport { initialData } from './initial-data';\nimport { Adder } from './adder';\n\nexport function useEditorProps(): FixedLayoutProps {\n  return useMemo<FixedLayoutProps>(\n    () => ({\n      plugins: () => [\n        createMinimapPlugin({\n          enableDisplayAllNodes: true,\n        }),\n      ],\n      nodeRegistries,\n      initialData,\n      materials: {\n        renderDefaultNode: NodeRender,\n        components: {\n          ...defaultFixedSemiMaterials,\n          [FlowRendererKey.ADDER]: Adder,\n        },\n      },\n      onAllLayersRendered: (ctx) => {\n        setTimeout(() => {\n          ctx.playground.config.fitView(ctx.document.root.bounds.pad(30));\n        }, 10);\n      },\n      /**\n       * Get the default node registry, which will be merged with the 'nodeRegistries'\n       * 提供默认的节点注册，这个会和 nodeRegistries 做合并\n       */\n      getNodeDefaultRegistry(type) {\n        return {\n          type,\n          meta: {\n            defaultExpanded: true,\n          },\n          formMeta: {\n            /**\n             * Render form\n             */\n            render: () => (\n              <>\n                <Field<string> name=\"title\">{({ field }) => <div>{field.value}</div>}</Field>\n                <Field<string> name=\"content\">\n                  <input />\n                </Field>\n              </>\n            ),\n          },\n        };\n      },\n      /**\n       * Redo/Undo enable\n       */\n      history: {\n        enable: true,\n        enableChangeNode: true, // Listen Node engine data change\n        onApply: (ctx) => {\n          if (ctx.document.disposed) return;\n          // Listen change to trigger auto save\n          console.log('auto save: ', ctx.document.toJSON());\n        },\n      },\n      /**\n       * Node engine enable, you can configure formMeta in the FlowNodeRegistry\n       */ nodeEngine: {\n        enable: true,\n      },\n    }),\n    []\n  );\n}\n"},168477:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FC } from 'react';\n\nimport {\n  FlowNodeEntity,\n  FlowNodeJSON,\n  FlowOperationService,\n  usePlayground,\n  useService,\n} from '@flowgram.ai/fixed-layout-editor';\n\nconst useAddNode = () => {\n  const playground = usePlayground();\n  const flowOperationService = useService(FlowOperationService) as FlowOperationService;\n\n  const handleAdd = (addProps: FlowNodeJSON, dropNode: FlowNodeEntity) => {\n    const blocks = addProps.blocks ? addProps.blocks : undefined;\n    const entity = flowOperationService.addFromNode(dropNode, {\n      ...addProps,\n      blocks,\n    });\n    setTimeout(() => {\n      playground.scrollToView({\n        bounds: entity.bounds,\n        scrollToCenter: true,\n      });\n    }, 10);\n    return entity;\n  };\n\n  const handleAddBranch = (addProps: FlowNodeJSON, dropNode: FlowNodeEntity) => {\n    const index = dropNode.index + 1;\n    const entity = flowOperationService.addBlock(dropNode.originParent!, addProps, {\n      index,\n    });\n    return entity;\n  };\n\n  return {\n    handleAdd,\n    handleAddBranch,\n  };\n};\n\nexport const Adder: FC<{\n  from: FlowNodeEntity;\n  to?: FlowNodeEntity;\n  hoverActivated: boolean;\n}> = ({ from, hoverActivated }) => {\n  const playground = usePlayground();\n\n  const { handleAdd } = useAddNode();\n\n  if (playground.config.readonlyOrDisabled) return null;\n\n  return (\n    <div\n      style={{\n        width: hoverActivated ? 15 : 6,\n        height: hoverActivated ? 15 : 6,\n        backgroundColor: hoverActivated ? '#fff' : 'rgb(143, 149, 158)',\n        color: '#fff',\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n      }}\n      onClick={() => {\n        handleAdd(\n          {\n            type: 'custom',\n            id: `custom_${Date.now()}`,\n            data: {\n              title: 'New Custom Node',\n              content: 'Custom Node Content',\n            },\n          },\n          from\n        );\n      }}\n    >\n      {hoverActivated ? (\n        <span\n          style={{\n            color: '#3370ff',\n            fontSize: 12,\n          }}\n        >\n          +\n        </span>\n      ) : null}\n    </div>\n  );\n};\n"},838447:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FixedLayoutEditorProvider, EditorRenderer } from '@flowgram.ai/fixed-layout-editor';\n\nimport { useEditorProps } from './use-editor-props';\nimport { Tools } from './tools';\nimport { Minimap } from './minimap';\n\nconst FlowGramApp = () => {\n  const editorProps = useEditorProps();\n  return (\n    <FixedLayoutEditorProvider {...editorProps}>\n      <EditorRenderer />\n      <Tools />\n      <Minimap />\n    </FixedLayoutEditorProvider>\n  );\n};\n\nexport default FlowGramApp;\n"},322706:function(n){n.exports="import type { FlowDocumentJSON } from '@flowgram.ai/fixed-layout-editor';\n\nexport const initialData: FlowDocumentJSON = {\n  nodes: [\n    // 开始节点\n    {\n      id: 'start_0',\n      type: 'start',\n      data: {\n        title: 'Start',\n        content: 'start content',\n      },\n      blocks: [],\n    },\n    // 分支节点\n    {\n      id: 'condition_0',\n      type: 'condition',\n      data: {\n        title: 'Condition',\n        content: 'condition content',\n      },\n      blocks: [\n        {\n          id: 'branch_0',\n          type: 'block',\n          data: {\n            title: 'Branch 0',\n            content: 'branch 1 content',\n          },\n          blocks: [\n            {\n              id: 'custom_0',\n              type: 'custom',\n              data: {\n                title: 'Custom',\n                content: 'custom content',\n              },\n            },\n          ],\n        },\n        {\n          id: 'branch_1',\n          type: 'block',\n          data: {\n            title: 'Branch 1',\n            content: 'branch 1 content',\n          },\n          blocks: [\n            {\n              id: 'break_0',\n              type: 'break',\n              data: {\n                title: 'Break',\n                content: 'Break content',\n              },\n            },\n          ],\n        },\n        {\n          id: 'branch_2',\n          type: 'block',\n          data: {\n            title: 'Branch 2',\n            content: 'branch 2 content',\n          },\n          blocks: [],\n        },\n      ],\n    },\n    // 结束节点\n    {\n      id: 'end_0',\n      type: 'end',\n      data: {\n        title: 'End',\n        content: 'end content',\n      },\n    },\n  ],\n};\n"},545906:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { MinimapRender } from '@flowgram.ai/minimap-plugin';\n\nexport const Minimap = () => (\n  <div\n    style={{\n      position: 'absolute',\n      left: 16,\n      bottom: 72,\n      zIndex: 100,\n      width: 118,\n    }}\n  >\n    <MinimapRender\n      containerStyles={{\n        pointerEvents: 'auto',\n        position: 'relative',\n        top: 'unset',\n        right: 'unset',\n        bottom: 'unset',\n        left: 'unset',\n      }}\n      inactiveStyle={{\n        opacity: 1,\n        scale: 1,\n        translateX: 0,\n        translateY: 0,\n      }}\n    />\n  </div>\n);\n"},825898:function(n){n.exports="/**\n * Copyright (c) 202 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport type { FlowNodeMeta, FlowNodeRegistry } from '@flowgram.ai/fixed-layout-editor';\n\nconst randomID = () => Math.random().toString(36).slice(2, 7);\n\nexport const nodeRegistries: FlowNodeRegistry<FlowNodeMeta>[] = [\n  {\n    /**\n     * 自定义节点类型\n     */\n    type: 'condition',\n    /**\n     * 自定义节点扩展:\n     *  - loop: 扩展为循环节点\n     *  - start: 扩展为开始节点\n     *  - dynamicSplit: 扩展为分支节点\n     *  - end: 扩展为结束节点\n     *  - tryCatch: 扩展为 tryCatch 节点\n     *  - break: 分支断开\n     *  - default: 扩展为普通节点 (默认)\n     */\n    extend: 'dynamicSplit',\n    /**\n     * 节点配置信息\n     */\n    meta: {\n      // isStart: false, // 是否为开始节点\n      // isNodeEnd: false, // 是否为结束节点，结束节点后边无法再添加节点\n      // draggable: false, // 是否可拖拽，如开始节点和结束节点无法拖拽\n      // selectable: false, // 触发器等开始节点不能被框选\n      // deleteDisable: true, // 禁止删除\n      // copyDisable: true, // 禁止copy\n      // addDisable: true, // 禁止添加\n    },\n    onAdd() {\n      return {\n        id: `condition_${randomID()}`,\n        type: 'condition',\n        data: {\n          title: 'Condition',\n        },\n        blocks: [\n          {\n            id: randomID(),\n            type: 'block',\n            data: {\n              title: 'If_0',\n            },\n          },\n          {\n            id: randomID(),\n            type: 'block',\n            data: {\n              title: 'If_1',\n            },\n          },\n        ],\n      };\n    },\n  },\n  {\n    type: 'custom',\n    meta: {},\n    onAdd() {\n      return {\n        id: `custom_${randomID()}`,\n        type: 'custom',\n        data: {\n          title: 'Custom',\n          content: 'this is custom content',\n        },\n      };\n    },\n  },\n];\n"},325289:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { FlowNodeEntity, useNodeRender, useClientContext } from '@flowgram.ai/fixed-layout-editor';\n\nexport const NodeRender = ({ node }: { node: FlowNodeEntity }) => {\n  const {\n    onMouseEnter,\n    onMouseLeave,\n    startDrag,\n    form,\n    dragging,\n    isBlockOrderIcon,\n    isBlockIcon,\n    activated,\n  } = useNodeRender();\n  const ctx = useClientContext();\n\n  return (\n    <div\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onMouseDown={(e) => {\n        startDrag(e);\n        e.stopPropagation();\n      }}\n      style={{\n        width: 280,\n        minHeight: 88,\n        height: 'auto',\n        background: '#fff',\n        border: '1px solid rgba(6, 7, 9, 0.15)',\n        borderColor: activated ? '#82a7fc' : 'rgba(6, 7, 9, 0.15)',\n        borderRadius: 8,\n        boxShadow: '0 2px 6px 0 rgba(0, 0, 0, 0.04), 0 4px 12px 0 rgba(0, 0, 0, 0.02)',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        position: 'relative',\n        padding: 12,\n        cursor: 'move',\n        opacity: dragging ? 0.3 : 1,\n        ...(isBlockOrderIcon || isBlockIcon ? { width: 260 } : {}),\n      }}\n    >\n      {form?.render()}\n      {/* 删除按钮 */}\n      <button\n        onClick={(e) => {\n          e.stopPropagation();\n          ctx.operation.deleteNode(node);\n        }}\n        style={{\n          position: 'absolute',\n          top: 4,\n          right: 4,\n          width: 20,\n          height: 20,\n          border: 'none',\n          borderRadius: '50%',\n          background: '#fff',\n          color: '#666',\n          fontSize: 12,\n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          boxShadow: '0 1px 3px rgba(0,0,0,0.12)',\n          transition: 'all 0.2s',\n        }}\n      >\n        \xd7\n      </button>\n    </div>\n  );\n};\n"},9138:function(n){n.exports="/**\n * Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n * SPDX-License-Identifier: MIT\n */\n\nimport { CSSProperties, useEffect, useState } from 'react';\n\nimport { usePlaygroundTools, useClientContext } from '@flowgram.ai/fixed-layout-editor';\n\nexport const Tools = () => {\n  const { history } = useClientContext();\n  const tools = usePlaygroundTools();\n  const [canUndo, setCanUndo] = useState(false);\n  const [canRedo, setCanRedo] = useState(false);\n\n  const buttonStyle: CSSProperties = {\n    border: '1px solid #e0e0e0',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    padding: '4px',\n    color: '#141414',\n    background: '#e1e3e4',\n  };\n\n  useEffect(() => {\n    const disposable = history.undoRedoService.onChange(() => {\n      setCanUndo(history.canUndo());\n      setCanRedo(history.canRedo());\n    });\n    return () => disposable.dispose();\n  }, [history]);\n\n  return (\n    <div\n      style={{ position: 'absolute', zIndex: 10, bottom: 34, left: 16, display: 'flex', gap: 8 }}\n    >\n      <button style={buttonStyle} onClick={() => tools.zoomin()}>\n        ZoomIn\n      </button>\n      <button style={buttonStyle} onClick={() => tools.zoomout()}>\n        ZoomOut\n      </button>\n      <span\n        style={{\n          ...buttonStyle,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'default',\n          width: 40,\n        }}\n      >\n        {Math.floor(tools.zoom * 100)}%\n      </span>\n      <button style={buttonStyle} onClick={() => tools.fitView()}>\n        FitView\n      </button>\n      <button style={buttonStyle} onClick={() => tools.changeLayout()}>\n        ChangeLayout\n      </button>\n      <button\n        style={{\n          ...buttonStyle,\n          cursor: canUndo ? 'pointer' : 'not-allowed',\n          color: canUndo ? '#141414' : '#b1b1b1',\n        }}\n        onClick={() => history.undo()}\n        disabled={!canUndo}\n      >\n        Undo\n      </button>\n      <button\n        style={{\n          ...buttonStyle,\n          cursor: canRedo ? 'pointer' : 'not-allowed',\n          color: canRedo ? '#141414' : '#b1b1b1',\n        }}\n        onClick={() => history.redo()}\n        disabled={!canRedo}\n      >\n        Redo\n      </button>\n    </div>\n  );\n};\n"},216466:function(n){n.exports="import '@flowgram.ai/fixed-layout-editor/index.css';\n\nimport { useMemo } from 'react';\n\nimport { createMinimapPlugin } from '@flowgram.ai/minimap-plugin';\nimport { defaultFixedSemiMaterials } from '@flowgram.ai/fixed-semi-materials';\nimport { FlowRendererKey, FixedLayoutProps, Field } from '@flowgram.ai/fixed-layout-editor';\n\nimport { NodeRender } from './node-render';\nimport { nodeRegistries } from './node-registries';\nimport { initialData } from './initial-data';\nimport { Adder } from './adder';\n\nexport function useEditorProps(): FixedLayoutProps {\n  return useMemo<FixedLayoutProps>(\n    () => ({\n      plugins: () => [\n        createMinimapPlugin({\n          disableLayer: true,\n          enableDisplayAllNodes: true,\n          canvasStyle: {\n            canvasWidth: 100,\n            canvasHeight: 50,\n            canvasPadding: 50,\n          },\n        }),\n      ],\n      nodeRegistries,\n      initialData,\n      materials: {\n        renderDefaultNode: NodeRender,\n        components: {\n          ...defaultFixedSemiMaterials,\n          [FlowRendererKey.ADDER]: Adder,\n        },\n      },\n      onAllLayersRendered: (ctx) => {\n        setTimeout(() => {\n          ctx.playground.config.fitView(ctx.document.root.bounds.pad(30));\n        }, 10);\n      },\n      /**\n       * Get the default node registry, which will be merged with the 'nodeRegistries'\n       * 提供默认的节点注册，这个会和 nodeRegistries 做合并\n       */\n      getNodeDefaultRegistry(type) {\n        return {\n          type,\n          meta: {\n            defaultExpanded: true,\n          },\n          formMeta: {\n            /**\n             * Render form\n             */\n            render: () => (\n              <>\n                <Field<string> name=\"title\">{({ field }) => <div>{field.value}</div>}</Field>\n                <Field<string> name=\"content\">\n                  <input />\n                </Field>\n              </>\n            ),\n          },\n        };\n      },\n      /**\n       * Redo/Undo enable\n       */\n      history: {\n        enable: true,\n        enableChangeNode: true, // Listen Node engine data change\n        onApply: (ctx) => {\n          if (ctx.document.disposed) return;\n          // Listen change to trigger auto save\n          console.log('auto save: ', ctx.document.toJSON());\n        },\n      },\n      /**\n       * Node engine enable, you can configure formMeta in the FlowNodeRegistry\n       */ nodeEngine: {\n        enable: true,\n      },\n    }),\n    []\n  );\n}\n"},659722:function(n,e,o){o.d(e,{B:()=>d,G:()=>i});var t=o(110239),r=o(399743);let i=n=>{let{files:e,activeFile:o}=n;return(0,t.jsx)(r.xR,{files:e,theme:"light",template:"react-ts",customSetup:{dependencies:{"@flowgram.ai/free-layout-editor":"0.5.5","@flowgram.ai/free-snap-plugin":"0.5.5","@flowgram.ai/minimap-plugin":"0.5.5","styled-components":"5.3.11"}},options:{editorHeight:350,activeFile:o}})},d=n=>{let{files:e,activeFile:o}=n;return(0,t.jsx)(r.xR,{files:e,theme:"light",template:"react-ts",customSetup:{dependencies:{"@flowgram.ai/fixed-layout-editor":"0.1.0-alpha.19","@flowgram.ai/fixed-semi-materials":"0.1.0-alpha.19","@flowgram.ai/minimap-plugin":"0.1.0-alpha.19","styled-components":"5.3.11"}},options:{editorHeight:350,activeFile:o}})}}}]);